
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004678  08004678  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004678  08004678  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004678  08004678  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004678  08004678  00014678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800467c  0800467c  0001467c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000009c  0800471c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  0800471c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc3b  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  0002bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019037  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109fa  00000000  00000000  00048837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae5b  00000000  00000000  00059231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e408c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a4c  00000000  00000000  000e40dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	080045ec 	.word	0x080045ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	080045ec 	.word	0x080045ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <setGreenLed1>:
#define LED1_EN0_Pin       L1_EN0_Pin
#define LED1_EN1_GPIO_Port L1_EN1_GPIO_Port
#define LED1_EN1_Pin       L1_EN1_Pin
#endif

void setGreenLed1(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000166:	4805      	ldr	r0, [pc, #20]	; (800017c <setGreenLed1+0x20>)
 8000168:	f002 f84b 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2108      	movs	r1, #8
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <setGreenLed1+0x24>)
 8000172:	f002 f846 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40010800 	.word	0x40010800
 8000180:	40010c00 	.word	0x40010c00

08000184 <setYellowLed1>:

void setYellowLed1(){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
#else
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2108      	movs	r1, #8
 800018c:	4805      	ldr	r0, [pc, #20]	; (80001a4 <setYellowLed1+0x20>)
 800018e:	f002 f838 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, SET);
 8000192:	2201      	movs	r2, #1
 8000194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <setYellowLed1+0x24>)
 800019a:	f002 f832 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40010c00 	.word	0x40010c00
 80001a8:	40010800 	.word	0x40010800

080001ac <setRedLed1>:

void setRedLed1(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2108      	movs	r1, #8
 80001b4:	4805      	ldr	r0, [pc, #20]	; (80001cc <setRedLed1+0x20>)
 80001b6:	f002 f824 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <setRedLed1+0x24>)
 80001c2:	f002 f81e 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	40010800 	.word	0x40010800

080001d4 <setGreenLed2>:

void setGreenLed2(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2120      	movs	r1, #32
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <setGreenLed2+0x1c>)
 80001de:	f002 f810 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2110      	movs	r1, #16
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <setGreenLed2+0x1c>)
 80001e8:	f002 f80b 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <setYellowLed2>:

void setYellowLed2(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
#else
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2110      	movs	r1, #16
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <setYellowLed2+0x1c>)
 80001fe:	f002 f800 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2120      	movs	r1, #32
 8000206:	4802      	ldr	r0, [pc, #8]	; (8000210 <setYellowLed2+0x1c>)
 8000208:	f001 fffb 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00

08000214 <setRedLed2>:

void setRedLed2(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
#ifndef HARDWARE
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
#else
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2110      	movs	r1, #16
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <setRedLed2+0x1c>)
 800021e:	f001 fff0 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, SET);
 8000222:	2201      	movs	r2, #1
 8000224:	2120      	movs	r1, #32
 8000226:	4802      	ldr	r0, [pc, #8]	; (8000230 <setRedLed2+0x1c>)
 8000228:	f001 ffeb 	bl	8002202 <HAL_GPIO_WritePin>
#endif
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40010c00 	.word	0x40010c00

08000234 <clearAllLed>:

void clearAllLed(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED0_EN1_GPIO_Port, LED0_EN1_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2108      	movs	r1, #8
 800023c:	480a      	ldr	r0, [pc, #40]	; (8000268 <clearAllLed+0x34>)
 800023e:	f001 ffe0 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED0_EN0_GPIO_Port, LED0_EN0_Pin, RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <clearAllLed+0x38>)
 800024a:	f001 ffda 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN1_GPIO_Port, LED1_EN1_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2110      	movs	r1, #16
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <clearAllLed+0x34>)
 8000254:	f001 ffd5 	bl	8002202 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_EN0_GPIO_Port, LED1_EN0_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2120      	movs	r1, #32
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <clearAllLed+0x34>)
 800025e:	f001 ffd0 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <toggleRed1>:

void toggleRed1(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	if(state == 1){
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <toggleRed1+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d105      	bne.n	8000288 <toggleRed1+0x18>
		setRedLed1();
 800027c:	f7ff ff96 	bl	80001ac <setRedLed1>
		state = 0;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <toggleRed1+0x20>)
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
		return;
 8000286:	e002      	b.n	800028e <toggleRed1+0x1e>
	}
	state = 1;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <toggleRed1+0x20>)
 800028a:	2201      	movs	r2, #1
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000c8 	.word	0x200000c8

08000294 <toggleYellow1>:
void toggleYellow1(){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	if(state == 1){
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <toggleYellow1+0x20>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d105      	bne.n	80002ac <toggleYellow1+0x18>
		setYellowLed1();
 80002a0:	f7ff ff70 	bl	8000184 <setYellowLed1>
		state = 0;
 80002a4:	4b03      	ldr	r3, [pc, #12]	; (80002b4 <toggleYellow1+0x20>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
		return;
 80002aa:	e002      	b.n	80002b2 <toggleYellow1+0x1e>
	}
	state = 1;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <toggleYellow1+0x20>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	200000c8 	.word	0x200000c8

080002b8 <toggleGreen1>:
void toggleGreen1(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	if(state == 1){
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <toggleGreen1+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d105      	bne.n	80002d0 <toggleGreen1+0x18>
		setGreenLed1();
 80002c4:	f7ff ff4a 	bl	800015c <setGreenLed1>
		state = 0;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <toggleGreen1+0x20>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
		return;
 80002ce:	e002      	b.n	80002d6 <toggleGreen1+0x1e>
	}
	state = 1;
 80002d0:	4b01      	ldr	r3, [pc, #4]	; (80002d8 <toggleGreen1+0x20>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200000c8 	.word	0x200000c8

080002dc <toggleRed2>:

void toggleRed2(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if(state2 == 1){
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <toggleRed2+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d105      	bne.n	80002f4 <toggleRed2+0x18>
		setRedLed2();
 80002e8:	f7ff ff94 	bl	8000214 <setRedLed2>
		state2 = 0;
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <toggleRed2+0x20>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
		return;
 80002f2:	e002      	b.n	80002fa <toggleRed2+0x1e>
	}
	state2 = 1;
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <toggleRed2+0x20>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000cc 	.word	0x200000cc

08000300 <toggleYellow2>:
void toggleYellow2(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	if(state2 == 1){
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <toggleYellow2+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d105      	bne.n	8000318 <toggleYellow2+0x18>
		setYellowLed2();
 800030c:	f7ff ff72 	bl	80001f4 <setYellowLed2>
		state2 = 0;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <toggleYellow2+0x20>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
		return;
 8000316:	e002      	b.n	800031e <toggleYellow2+0x1e>
	}
	state2 = 1;
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <toggleYellow2+0x20>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200000cc 	.word	0x200000cc

08000324 <toggleGreen2>:
void toggleGreen2(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	if(state2 == 1){
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <toggleGreen2+0x20>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d105      	bne.n	800033c <toggleGreen2+0x18>
		setGreenLed2();
 8000330:	f7ff ff50 	bl	80001d4 <setGreenLed2>
		state2 = 0;
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <toggleGreen2+0x20>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
		return;
 800033a:	e002      	b.n	8000342 <toggleGreen2+0x1e>
	}
	state2 = 1;
 800033c:	4b01      	ldr	r3, [pc, #4]	; (8000344 <toggleGreen2+0x20>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200000cc 	.word	0x200000cc

08000348 <fsm1_automatic_run>:
 *      Author: PC
 */

#include "fsm_automatic.h"

void fsm1_automatic_run() {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	switch (status1) {
 800034c:	4b9b      	ldr	r3, [pc, #620]	; (80005bc <fsm1_automatic_run+0x274>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b01      	subs	r3, #1
 8000352:	2b11      	cmp	r3, #17
 8000354:	f200 8126 	bhi.w	80005a4 <fsm1_automatic_run+0x25c>
 8000358:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <fsm1_automatic_run+0x18>)
 800035a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800035e:	bf00      	nop
 8000360:	080003a9 	.word	0x080003a9
 8000364:	080003c5 	.word	0x080003c5
 8000368:	080004f7 	.word	0x080004f7
 800036c:	0800045f 	.word	0x0800045f
 8000370:	080005a5 	.word	0x080005a5
 8000374:	080005a5 	.word	0x080005a5
 8000378:	080005a5 	.word	0x080005a5
 800037c:	080005a5 	.word	0x080005a5
 8000380:	080005a5 	.word	0x080005a5
 8000384:	080005a5 	.word	0x080005a5
 8000388:	080005a5 	.word	0x080005a5
 800038c:	080005a5 	.word	0x080005a5
 8000390:	080005a5 	.word	0x080005a5
 8000394:	080005a5 	.word	0x080005a5
 8000398:	080005a5 	.word	0x080005a5
 800039c:	080005a5 	.word	0x080005a5
 80003a0:	080005a5 	.word	0x080005a5
 80003a4:	0800058f 	.word	0x0800058f
	case INIT:
		//TODO
		setRedLed1();
 80003a8:	f7ff ff00 	bl	80001ac <setRedLed1>
		status1 = AUTO_RED;
 80003ac:	4b83      	ldr	r3, [pc, #524]	; (80005bc <fsm1_automatic_run+0x274>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	601a      	str	r2, [r3, #0]
		setTimer1(red_duration1);
 80003b2:	4b83      	ldr	r3, [pc, #524]	; (80005c0 <fsm1_automatic_run+0x278>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fa72 	bl	80018a0 <setTimer1>
		setTimer3(100);
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f001 fa97 	bl	80018f0 <setTimer3>
		break;
 80003c2:	e0f8      	b.n	80005b6 <fsm1_automatic_run+0x26e>

	case AUTO_RED:
		//TODO
		setRedLed1();
 80003c4:	f7ff fef2 	bl	80001ac <setRedLed1>
		if (isTimer3Expired()) {
 80003c8:	f001 fbb4 	bl	8001b34 <isTimer3Expired>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d00c      	beq.n	80003ec <fsm1_automatic_run+0xa4>
			setTimer3(100);
 80003d2:	2064      	movs	r0, #100	; 0x64
 80003d4:	f001 fa8c 	bl	80018f0 <setTimer3>
			timeCountdown1--;
 80003d8:	4b7a      	ldr	r3, [pc, #488]	; (80005c4 <fsm1_automatic_run+0x27c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b01      	subs	r3, #1
 80003de:	4a79      	ldr	r2, [pc, #484]	; (80005c4 <fsm1_automatic_run+0x27c>)
 80003e0:	6013      	str	r3, [r2, #0]
			writeMess(timeCountdown1);
 80003e2:	4b78      	ldr	r3, [pc, #480]	; (80005c4 <fsm1_automatic_run+0x27c>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fd32 	bl	8000e50 <writeMess>
		}
		if (isTimer1Expired() == 1) {
 80003ec:	f001 fb7e 	bl	8001aec <isTimer1Expired>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d114      	bne.n	8000420 <fsm1_automatic_run+0xd8>
			setTimer1(green_duration1);
 80003f6:	4b74      	ldr	r3, [pc, #464]	; (80005c8 <fsm1_automatic_run+0x280>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fa50 	bl	80018a0 <setTimer1>
			status1 = AUTO_GREEN;
 8000400:	4b6e      	ldr	r3, [pc, #440]	; (80005bc <fsm1_automatic_run+0x274>)
 8000402:	2204      	movs	r2, #4
 8000404:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 8000406:	2064      	movs	r0, #100	; 0x64
 8000408:	f001 fa72 	bl	80018f0 <setTimer3>
			timeCountdown1 = green_duration1 / 100;
 800040c:	4b6e      	ldr	r3, [pc, #440]	; (80005c8 <fsm1_automatic_run+0x280>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a6e      	ldr	r2, [pc, #440]	; (80005cc <fsm1_automatic_run+0x284>)
 8000412:	fb82 1203 	smull	r1, r2, r2, r3
 8000416:	1152      	asrs	r2, r2, #5
 8000418:	17db      	asrs	r3, r3, #31
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	4a69      	ldr	r2, [pc, #420]	; (80005c4 <fsm1_automatic_run+0x27c>)
 800041e:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(0)) {
 8000420:	2000      	movs	r0, #0
 8000422:	f000 fdfd 	bl	8001020 <isButtonPressed>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	f000 80bd 	beq.w	80005a8 <fsm1_automatic_run+0x260>
			clearAllLed();
 800042e:	f7ff ff01 	bl	8000234 <clearAllLed>
			status1 = WAIT;
 8000432:	4b62      	ldr	r3, [pc, #392]	; (80005bc <fsm1_automatic_run+0x274>)
 8000434:	2212      	movs	r2, #18
 8000436:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 8000438:	4b65      	ldr	r3, [pc, #404]	; (80005d0 <fsm1_automatic_run+0x288>)
 800043a:	2212      	movs	r2, #18
 800043c:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 800043e:	4b65      	ldr	r3, [pc, #404]	; (80005d4 <fsm1_automatic_run+0x28c>)
 8000440:	220c      	movs	r2, #12
 8000442:	601a      	str	r2, [r3, #0]
			clearTimer1();
 8000444:	f001 fa90 	bl	8001968 <clearTimer1>
			clearTimer2();
 8000448:	f001 fa9e 	bl	8001988 <clearTimer2>
			clearTimer3();
 800044c:	f001 faac 	bl	80019a8 <clearTimer3>
			setTimer1(100);
 8000450:	2064      	movs	r0, #100	; 0x64
 8000452:	f001 fa25 	bl	80018a0 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 8000456:	4b60      	ldr	r3, [pc, #384]	; (80005d8 <fsm1_automatic_run+0x290>)
 8000458:	2215      	movs	r2, #21
 800045a:	601a      	str	r2, [r3, #0]
		}
		break;
 800045c:	e0a4      	b.n	80005a8 <fsm1_automatic_run+0x260>

	case AUTO_GREEN:
		//TODO
		setGreenLed1();
 800045e:	f7ff fe7d 	bl	800015c <setGreenLed1>
		if (isTimer3Expired()) {
 8000462:	f001 fb67 	bl	8001b34 <isTimer3Expired>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00c      	beq.n	8000486 <fsm1_automatic_run+0x13e>
			setTimer3(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f001 fa3f 	bl	80018f0 <setTimer3>
			timeCountdown1--;
 8000472:	4b54      	ldr	r3, [pc, #336]	; (80005c4 <fsm1_automatic_run+0x27c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	3b01      	subs	r3, #1
 8000478:	4a52      	ldr	r2, [pc, #328]	; (80005c4 <fsm1_automatic_run+0x27c>)
 800047a:	6013      	str	r3, [r2, #0]
			writeMess(timeCountdown1);
 800047c:	4b51      	ldr	r3, [pc, #324]	; (80005c4 <fsm1_automatic_run+0x27c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fce5 	bl	8000e50 <writeMess>
		}
		if (isTimer1Expired() == 1) {
 8000486:	f001 fb31 	bl	8001aec <isTimer1Expired>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d114      	bne.n	80004ba <fsm1_automatic_run+0x172>
			setTimer1(yellow_duration1);
 8000490:	4b52      	ldr	r3, [pc, #328]	; (80005dc <fsm1_automatic_run+0x294>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f001 fa03 	bl	80018a0 <setTimer1>
			status1 = AUTO_YELLOW;
 800049a:	4b48      	ldr	r3, [pc, #288]	; (80005bc <fsm1_automatic_run+0x274>)
 800049c:	2203      	movs	r2, #3
 800049e:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 80004a0:	2064      	movs	r0, #100	; 0x64
 80004a2:	f001 fa25 	bl	80018f0 <setTimer3>
			timeCountdown1 = yellow_duration1 / 100;
 80004a6:	4b4d      	ldr	r3, [pc, #308]	; (80005dc <fsm1_automatic_run+0x294>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a48      	ldr	r2, [pc, #288]	; (80005cc <fsm1_automatic_run+0x284>)
 80004ac:	fb82 1203 	smull	r1, r2, r2, r3
 80004b0:	1152      	asrs	r2, r2, #5
 80004b2:	17db      	asrs	r3, r3, #31
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	4a43      	ldr	r2, [pc, #268]	; (80005c4 <fsm1_automatic_run+0x27c>)
 80004b8:	6013      	str	r3, [r2, #0]
		}

		if (isButtonPressed(0)) {
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 fdb0 	bl	8001020 <isButtonPressed>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d072      	beq.n	80005ac <fsm1_automatic_run+0x264>
			clearAllLed();
 80004c6:	f7ff feb5 	bl	8000234 <clearAllLed>
			status1 = WAIT;
 80004ca:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <fsm1_automatic_run+0x274>)
 80004cc:	2212      	movs	r2, #18
 80004ce:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 80004d0:	4b3f      	ldr	r3, [pc, #252]	; (80005d0 <fsm1_automatic_run+0x288>)
 80004d2:	2212      	movs	r2, #18
 80004d4:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 80004d6:	4b3f      	ldr	r3, [pc, #252]	; (80005d4 <fsm1_automatic_run+0x28c>)
 80004d8:	220c      	movs	r2, #12
 80004da:	601a      	str	r2, [r3, #0]
			clearTimer1();
 80004dc:	f001 fa44 	bl	8001968 <clearTimer1>
			clearTimer2();
 80004e0:	f001 fa52 	bl	8001988 <clearTimer2>
			clearTimer3();
 80004e4:	f001 fa60 	bl	80019a8 <clearTimer3>
			setTimer1(100);
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f001 f9d9 	bl	80018a0 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 80004ee:	4b3a      	ldr	r3, [pc, #232]	; (80005d8 <fsm1_automatic_run+0x290>)
 80004f0:	2215      	movs	r2, #21
 80004f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80004f4:	e05a      	b.n	80005ac <fsm1_automatic_run+0x264>

	case AUTO_YELLOW:
		//TODO
		setYellowLed1();
 80004f6:	f7ff fe45 	bl	8000184 <setYellowLed1>
		if (isTimer3Expired()) {
 80004fa:	f001 fb1b 	bl	8001b34 <isTimer3Expired>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00c      	beq.n	800051e <fsm1_automatic_run+0x1d6>
			setTimer3(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f001 f9f3 	bl	80018f0 <setTimer3>
			timeCountdown1--;
 800050a:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <fsm1_automatic_run+0x27c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	3b01      	subs	r3, #1
 8000510:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <fsm1_automatic_run+0x27c>)
 8000512:	6013      	str	r3, [r2, #0]
			writeMess(timeCountdown1);
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <fsm1_automatic_run+0x27c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fc99 	bl	8000e50 <writeMess>
		}
		if (isTimer1Expired() == 1) {
 800051e:	f001 fae5 	bl	8001aec <isTimer1Expired>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d114      	bne.n	8000552 <fsm1_automatic_run+0x20a>
			setTimer1(red_duration1);
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <fsm1_automatic_run+0x278>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f001 f9b7 	bl	80018a0 <setTimer1>
			status1 = AUTO_RED;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <fsm1_automatic_run+0x274>)
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
			setTimer3(100);
 8000538:	2064      	movs	r0, #100	; 0x64
 800053a:	f001 f9d9 	bl	80018f0 <setTimer3>
			timeCountdown1 = red_duration1 / 100;
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <fsm1_automatic_run+0x278>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a22      	ldr	r2, [pc, #136]	; (80005cc <fsm1_automatic_run+0x284>)
 8000544:	fb82 1203 	smull	r1, r2, r2, r3
 8000548:	1152      	asrs	r2, r2, #5
 800054a:	17db      	asrs	r3, r3, #31
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <fsm1_automatic_run+0x27c>)
 8000550:	6013      	str	r3, [r2, #0]
		}

		if (isButtonPressed(0)) {
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fd64 	bl	8001020 <isButtonPressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d028      	beq.n	80005b0 <fsm1_automatic_run+0x268>
			clearAllLed();
 800055e:	f7ff fe69 	bl	8000234 <clearAllLed>
			status1 = WAIT;
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <fsm1_automatic_run+0x274>)
 8000564:	2212      	movs	r2, #18
 8000566:	601a      	str	r2, [r3, #0]
			status2 = WAIT;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <fsm1_automatic_run+0x288>)
 800056a:	2212      	movs	r2, #18
 800056c:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED1;
 800056e:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <fsm1_automatic_run+0x28c>)
 8000570:	220c      	movs	r2, #12
 8000572:	601a      	str	r2, [r3, #0]
			clearTimer1();
 8000574:	f001 f9f8 	bl	8001968 <clearTimer1>
			clearTimer2();
 8000578:	f001 fa06 	bl	8001988 <clearTimer2>
			clearTimer3();
 800057c:	f001 fa14 	bl	80019a8 <clearTimer3>
			setTimer1(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f001 f98d 	bl	80018a0 <setTimer1>
			status4 = PEDESTRIAN_OFF; //debug
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <fsm1_automatic_run+0x290>)
 8000588:	2215      	movs	r2, #21
 800058a:	601a      	str	r2, [r3, #0]
		}
		break;
 800058c:	e010      	b.n	80005b0 <fsm1_automatic_run+0x268>

	case WAIT:
		if(returnFlag1){
 800058e:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <fsm1_automatic_run+0x298>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d00e      	beq.n	80005b4 <fsm1_automatic_run+0x26c>
			returnFlag1 = 0;
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <fsm1_automatic_run+0x298>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
			status1 = INIT;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <fsm1_automatic_run+0x274>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
		}
		break;
 80005a2:	e007      	b.n	80005b4 <fsm1_automatic_run+0x26c>
	default:
		break;
 80005a4:	bf00      	nop
 80005a6:	e006      	b.n	80005b6 <fsm1_automatic_run+0x26e>
		break;
 80005a8:	bf00      	nop
 80005aa:	e004      	b.n	80005b6 <fsm1_automatic_run+0x26e>
		break;
 80005ac:	bf00      	nop
 80005ae:	e002      	b.n	80005b6 <fsm1_automatic_run+0x26e>
		break;
 80005b0:	bf00      	nop
 80005b2:	e000      	b.n	80005b6 <fsm1_automatic_run+0x26e>
		break;
 80005b4:	bf00      	nop
	}
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000
 80005c0:	2000000c 	.word	0x2000000c
 80005c4:	200000b8 	.word	0x200000b8
 80005c8:	20000014 	.word	0x20000014
 80005cc:	51eb851f 	.word	0x51eb851f
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000010 	.word	0x20000010
 80005e0:	200000c0 	.word	0x200000c0

080005e4 <fsm2_automatic_run>:

void fsm2_automatic_run() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	switch (status2) {
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <fsm2_automatic_run+0x154>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	2b11      	cmp	r3, #17
 80005f0:	f200 8096 	bhi.w	8000720 <fsm2_automatic_run+0x13c>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <fsm2_automatic_run+0x18>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000645 	.word	0x08000645
 8000600:	0800066f 	.word	0x0800066f
 8000604:	080006d7 	.word	0x080006d7
 8000608:	080006a3 	.word	0x080006a3
 800060c:	08000721 	.word	0x08000721
 8000610:	08000721 	.word	0x08000721
 8000614:	08000721 	.word	0x08000721
 8000618:	08000721 	.word	0x08000721
 800061c:	08000721 	.word	0x08000721
 8000620:	08000721 	.word	0x08000721
 8000624:	08000721 	.word	0x08000721
 8000628:	08000721 	.word	0x08000721
 800062c:	08000721 	.word	0x08000721
 8000630:	08000721 	.word	0x08000721
 8000634:	08000721 	.word	0x08000721
 8000638:	08000721 	.word	0x08000721
 800063c:	08000721 	.word	0x08000721
 8000640:	0800070b 	.word	0x0800070b
	case INIT:
		//TODO
		setGreenLed2();
 8000644:	f7ff fdc6 	bl	80001d4 <setGreenLed2>
		status2 = AUTO_GREEN;
 8000648:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <fsm2_automatic_run+0x154>)
 800064a:	2204      	movs	r2, #4
 800064c:	601a      	str	r2, [r3, #0]
		setTimer2(green_duration2);
 800064e:	4b3b      	ldr	r3, [pc, #236]	; (800073c <fsm2_automatic_run+0x158>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f938 	bl	80018c8 <setTimer2>
		timeCountdown2 = green_duration2 / 100;
 8000658:	4b38      	ldr	r3, [pc, #224]	; (800073c <fsm2_automatic_run+0x158>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a38      	ldr	r2, [pc, #224]	; (8000740 <fsm2_automatic_run+0x15c>)
 800065e:	fb82 1203 	smull	r1, r2, r2, r3
 8000662:	1152      	asrs	r2, r2, #5
 8000664:	17db      	asrs	r3, r3, #31
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4a36      	ldr	r2, [pc, #216]	; (8000744 <fsm2_automatic_run+0x160>)
 800066a:	6013      	str	r3, [r2, #0]
		break;
 800066c:	e061      	b.n	8000732 <fsm2_automatic_run+0x14e>

	case AUTO_RED:
		//TODO
		setRedLed2();
 800066e:	f7ff fdd1 	bl	8000214 <setRedLed2>
		if (isTimer2Expired() == 1) {
 8000672:	f001 fa4d 	bl	8001b10 <isTimer2Expired>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d153      	bne.n	8000724 <fsm2_automatic_run+0x140>
			setTimer2(green_duration2);
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <fsm2_automatic_run+0x158>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f921 	bl	80018c8 <setTimer2>
			status2 = AUTO_GREEN;
 8000686:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <fsm2_automatic_run+0x154>)
 8000688:	2204      	movs	r2, #4
 800068a:	601a      	str	r2, [r3, #0]
			timeCountdown2 = green_duration2 / 100;
 800068c:	4b2b      	ldr	r3, [pc, #172]	; (800073c <fsm2_automatic_run+0x158>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <fsm2_automatic_run+0x15c>)
 8000692:	fb82 1203 	smull	r1, r2, r2, r3
 8000696:	1152      	asrs	r2, r2, #5
 8000698:	17db      	asrs	r3, r3, #31
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <fsm2_automatic_run+0x160>)
 800069e:	6013      	str	r3, [r2, #0]
		}

		break;
 80006a0:	e040      	b.n	8000724 <fsm2_automatic_run+0x140>

	case AUTO_GREEN:
		//TODO
		setGreenLed2();
 80006a2:	f7ff fd97 	bl	80001d4 <setGreenLed2>
		if (isTimer2Expired() == 1) {
 80006a6:	f001 fa33 	bl	8001b10 <isTimer2Expired>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d13b      	bne.n	8000728 <fsm2_automatic_run+0x144>
			setTimer2(yellow_duration2);
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <fsm2_automatic_run+0x164>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f907 	bl	80018c8 <setTimer2>
			status2 = AUTO_YELLOW;
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <fsm2_automatic_run+0x154>)
 80006bc:	2203      	movs	r2, #3
 80006be:	601a      	str	r2, [r3, #0]
			timeCountdown2 = yellow_duration2 / 100;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <fsm2_automatic_run+0x164>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <fsm2_automatic_run+0x15c>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1152      	asrs	r2, r2, #5
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <fsm2_automatic_run+0x160>)
 80006d2:	6013      	str	r3, [r2, #0]
		}
		break;
 80006d4:	e028      	b.n	8000728 <fsm2_automatic_run+0x144>

	case AUTO_YELLOW:
		//TODO
		setYellowLed2();
 80006d6:	f7ff fd8d 	bl	80001f4 <setYellowLed2>
		if (isTimer2Expired() == 1) {
 80006da:	f001 fa19 	bl	8001b10 <isTimer2Expired>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d123      	bne.n	800072c <fsm2_automatic_run+0x148>
			setTimer2(red_duration2);
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <fsm2_automatic_run+0x168>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f8ed 	bl	80018c8 <setTimer2>
			status2 = AUTO_RED;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <fsm2_automatic_run+0x154>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
			timeCountdown2 = red_duration2 / 100;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <fsm2_automatic_run+0x168>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <fsm2_automatic_run+0x15c>)
 80006fa:	fb82 1203 	smull	r1, r2, r2, r3
 80006fe:	1152      	asrs	r2, r2, #5
 8000700:	17db      	asrs	r3, r3, #31
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <fsm2_automatic_run+0x160>)
 8000706:	6013      	str	r3, [r2, #0]
		}
		break;
 8000708:	e010      	b.n	800072c <fsm2_automatic_run+0x148>

	case WAIT:
		if(returnFlag2){
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <fsm2_automatic_run+0x16c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00e      	beq.n	8000730 <fsm2_automatic_run+0x14c>
			status2 = INIT;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <fsm2_automatic_run+0x154>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
			returnFlag2 = 0;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <fsm2_automatic_run+0x16c>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
		}
		break;
 800071e:	e007      	b.n	8000730 <fsm2_automatic_run+0x14c>
	default:
		break;
 8000720:	bf00      	nop
 8000722:	e006      	b.n	8000732 <fsm2_automatic_run+0x14e>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <fsm2_automatic_run+0x14e>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <fsm2_automatic_run+0x14e>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <fsm2_automatic_run+0x14e>
		break;
 8000730:	bf00      	nop
	}
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000004 	.word	0x20000004
 800073c:	20000020 	.word	0x20000020
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	200000bc 	.word	0x200000bc
 8000748:	2000001c 	.word	0x2000001c
 800074c:	20000018 	.word	0x20000018
 8000750:	200000c4 	.word	0x200000c4

08000754 <fsm_modify_timer_control>:
 *      Author: PC
 */

#include "fsm_manual.h"

void fsm_modify_timer_control() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	switch (status3) {
 8000758:	4b8e      	ldr	r3, [pc, #568]	; (8000994 <fsm_modify_timer_control+0x240>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3b0c      	subs	r3, #12
 800075e:	2b06      	cmp	r3, #6
 8000760:	f200 8355 	bhi.w	8000e0e <fsm_modify_timer_control+0x6ba>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <fsm_modify_timer_control+0x18>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	08000789 	.word	0x08000789
 8000770:	0800088f 	.word	0x0800088f
 8000774:	080009ad 	.word	0x080009ad
 8000778:	08000ab9 	.word	0x08000ab9
 800077c:	08000be1 	.word	0x08000be1
 8000780:	08000ced 	.word	0x08000ced
 8000784:	08000e0f 	.word	0x08000e0f
	case MODIFY_RED1:
		//set mode to display
		if (isTimer1Expired()) {
 8000788:	f001 f9b0 	bl	8001aec <isTimer1Expired>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d014      	beq.n	80007bc <fsm_modify_timer_control+0x68>
			setTimer1(50);
 8000792:	2032      	movs	r0, #50	; 0x32
 8000794:	f001 f884 	bl	80018a0 <setTimer1>
			clearAllLed();
 8000798:	f7ff fd4c 	bl	8000234 <clearAllLed>
			counter_toggle++;
 800079c:	4b7e      	ldr	r3, [pc, #504]	; (8000998 <fsm_modify_timer_control+0x244>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a7d      	ldr	r2, [pc, #500]	; (8000998 <fsm_modify_timer_control+0x244>)
 80007a4:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 80007a6:	4b7c      	ldr	r3, [pc, #496]	; (8000998 <fsm_modify_timer_control+0x244>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b02      	cmp	r3, #2
 80007ac:	dd04      	ble.n	80007b8 <fsm_modify_timer_control+0x64>
				counter_toggle = 0;
 80007ae:	4b7a      	ldr	r3, [pc, #488]	; (8000998 <fsm_modify_timer_control+0x244>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
				toggleRed2();
 80007b4:	f7ff fd92 	bl	80002dc <toggleRed2>
			}
			toggleRed1();
 80007b8:	f7ff fd5a 	bl	8000270 <toggleRed1>
		}
//		setRedLed1();
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 fc2f 	bl	8001020 <isButtonPressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00e      	beq.n	80007e6 <fsm_modify_timer_control+0x92>
//			writeMessage("return 2"); //delete
			clearAllLed();
 80007c8:	f7ff fd34 	bl	8000234 <clearAllLed>
			//set new duration1 for red led
			red_duration1 = time_input * 100;
 80007cc:	4b73      	ldr	r3, [pc, #460]	; (800099c <fsm_modify_timer_control+0x248>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2264      	movs	r2, #100	; 0x64
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	4a72      	ldr	r2, [pc, #456]	; (80009a0 <fsm_modify_timer_control+0x24c>)
 80007d8:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80007da:	4b70      	ldr	r3, [pc, #448]	; (800099c <fsm_modify_timer_control+0x248>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW1;
 80007e0:	4b6c      	ldr	r3, [pc, #432]	; (8000994 <fsm_modify_timer_control+0x240>)
 80007e2:	220d      	movs	r2, #13
 80007e4:	601a      	str	r2, [r3, #0]
//			writeMessage("return"); //delete
		}
		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fc1a 	bl	8001020 <isButtonPressed>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d105      	bne.n	80007fe <fsm_modify_timer_control+0xaa>
 80007f2:	2001      	movs	r0, #1
 80007f4:	f000 fc34 	bl	8001060 <isButtonPressed1s>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d01a      	beq.n	8000834 <fsm_modify_timer_control+0xe0>
			time_input = (time_input + 1) % 100; //max value is 99
 80007fe:	4b67      	ldr	r3, [pc, #412]	; (800099c <fsm_modify_timer_control+0x248>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <fsm_modify_timer_control+0x250>)
 8000806:	fb83 1302 	smull	r1, r3, r3, r2
 800080a:	1159      	asrs	r1, r3, #5
 800080c:	17d3      	asrs	r3, r2, #31
 800080e:	1acb      	subs	r3, r1, r3
 8000810:	2164      	movs	r1, #100	; 0x64
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	4a60      	ldr	r2, [pc, #384]	; (800099c <fsm_modify_timer_control+0x248>)
 800081a:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 800081c:	4b5f      	ldr	r3, [pc, #380]	; (800099c <fsm_modify_timer_control+0x248>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <fsm_modify_timer_control+0xd6>
				time_input = 1; //0 is invalid value
 8000824:	4b5d      	ldr	r3, [pc, #372]	; (800099c <fsm_modify_timer_control+0x248>)
 8000826:	2201      	movs	r2, #1
 8000828:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 800082a:	4b5c      	ldr	r3, [pc, #368]	; (800099c <fsm_modify_timer_control+0x248>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fb0e 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fbf3 	bl	8001020 <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d105      	bne.n	800084c <fsm_modify_timer_control+0xf8>
 8000840:	2002      	movs	r0, #2
 8000842:	f000 fc0d 	bl	8001060 <isButtonPressed1s>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d010      	beq.n	800086e <fsm_modify_timer_control+0x11a>
			time_input = (time_input - 1);
 800084c:	4b53      	ldr	r3, [pc, #332]	; (800099c <fsm_modify_timer_control+0x248>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	4a52      	ldr	r2, [pc, #328]	; (800099c <fsm_modify_timer_control+0x248>)
 8000854:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000856:	4b51      	ldr	r3, [pc, #324]	; (800099c <fsm_modify_timer_control+0x248>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <fsm_modify_timer_control+0x110>
				time_input = 99; //0 is invalid value
 800085e:	4b4f      	ldr	r3, [pc, #316]	; (800099c <fsm_modify_timer_control+0x248>)
 8000860:	2263      	movs	r2, #99	; 0x63
 8000862:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000864:	4b4d      	ldr	r3, [pc, #308]	; (800099c <fsm_modify_timer_control+0x248>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 faf1 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fbd6 	bl	8001020 <isButtonPressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 82cb 	beq.w	8000e12 <fsm_modify_timer_control+0x6be>
			clearAllLed();
 800087c:	f7ff fcda 	bl	8000234 <clearAllLed>
			time_input = 1;
 8000880:	4b46      	ldr	r3, [pc, #280]	; (800099c <fsm_modify_timer_control+0x248>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW1;
 8000886:	4b43      	ldr	r3, [pc, #268]	; (8000994 <fsm_modify_timer_control+0x240>)
 8000888:	220d      	movs	r2, #13
 800088a:	601a      	str	r2, [r3, #0]
		}
		break;
 800088c:	e2c1      	b.n	8000e12 <fsm_modify_timer_control+0x6be>

	case MODIFY_YELLOW1:
		//set mode to display
		if (isTimer1Expired()) {
 800088e:	f001 f92d 	bl	8001aec <isTimer1Expired>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d014      	beq.n	80008c2 <fsm_modify_timer_control+0x16e>
			setTimer1(50);
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f001 f801 	bl	80018a0 <setTimer1>
			clearAllLed();
 800089e:	f7ff fcc9 	bl	8000234 <clearAllLed>
			toggleYellow1();
 80008a2:	f7ff fcf7 	bl	8000294 <toggleYellow1>
			counter_toggle++;
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <fsm_modify_timer_control+0x244>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a3a      	ldr	r2, [pc, #232]	; (8000998 <fsm_modify_timer_control+0x244>)
 80008ae:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <fsm_modify_timer_control+0x244>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	dd04      	ble.n	80008c2 <fsm_modify_timer_control+0x16e>
				counter_toggle = 0;
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <fsm_modify_timer_control+0x244>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
				toggleYellow2();
 80008be:	f7ff fd1f 	bl	8000300 <toggleYellow2>
			}
		}
//		setYellowLed1();
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 fbac 	bl	8001020 <isButtonPressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00e      	beq.n	80008ec <fsm_modify_timer_control+0x198>
			clearAllLed();
 80008ce:	f7ff fcb1 	bl	8000234 <clearAllLed>
			//set new duration1 for yellow led
			yellow_duration1 = time_input * 100;
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <fsm_modify_timer_control+0x248>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2264      	movs	r2, #100	; 0x64
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	4a32      	ldr	r2, [pc, #200]	; (80009a8 <fsm_modify_timer_control+0x254>)
 80008de:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <fsm_modify_timer_control+0x248>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN1;
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <fsm_modify_timer_control+0x240>)
 80008e8:	220e      	movs	r2, #14
 80008ea:	601a      	str	r2, [r3, #0]
//			writeMessage("return"); //delete
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 80008ec:	2001      	movs	r0, #1
 80008ee:	f000 fb97 	bl	8001020 <isButtonPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d105      	bne.n	8000904 <fsm_modify_timer_control+0x1b0>
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fbb1 	bl	8001060 <isButtonPressed1s>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d01a      	beq.n	800093a <fsm_modify_timer_control+0x1e6>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <fsm_modify_timer_control+0x248>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <fsm_modify_timer_control+0x250>)
 800090c:	fb83 1302 	smull	r1, r3, r3, r2
 8000910:	1159      	asrs	r1, r3, #5
 8000912:	17d3      	asrs	r3, r2, #31
 8000914:	1acb      	subs	r3, r1, r3
 8000916:	2164      	movs	r1, #100	; 0x64
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	4a1f      	ldr	r2, [pc, #124]	; (800099c <fsm_modify_timer_control+0x248>)
 8000920:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <fsm_modify_timer_control+0x248>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <fsm_modify_timer_control+0x1dc>
				time_input = 1; //0 is invalid value
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <fsm_modify_timer_control+0x248>)
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <fsm_modify_timer_control+0x248>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fa8b 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 800093a:	2002      	movs	r0, #2
 800093c:	f000 fb70 	bl	8001020 <isButtonPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d105      	bne.n	8000952 <fsm_modify_timer_control+0x1fe>
 8000946:	2002      	movs	r0, #2
 8000948:	f000 fb8a 	bl	8001060 <isButtonPressed1s>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d010      	beq.n	8000974 <fsm_modify_timer_control+0x220>
			time_input = (time_input - 1);
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <fsm_modify_timer_control+0x248>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3b01      	subs	r3, #1
 8000958:	4a10      	ldr	r2, [pc, #64]	; (800099c <fsm_modify_timer_control+0x248>)
 800095a:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <fsm_modify_timer_control+0x248>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <fsm_modify_timer_control+0x216>
				time_input = 99; //0 is invalid value
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <fsm_modify_timer_control+0x248>)
 8000966:	2263      	movs	r2, #99	; 0x63
 8000968:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <fsm_modify_timer_control+0x248>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fa6e 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000974:	2000      	movs	r0, #0
 8000976:	f000 fb53 	bl	8001020 <isButtonPressed>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	f000 824a 	beq.w	8000e16 <fsm_modify_timer_control+0x6c2>
			clearAllLed();
 8000982:	f7ff fc57 	bl	8000234 <clearAllLed>
			time_input = 1;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <fsm_modify_timer_control+0x248>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN1;
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <fsm_modify_timer_control+0x240>)
 800098e:	220e      	movs	r2, #14
 8000990:	601a      	str	r2, [r3, #0]
		}
		break;
 8000992:	e240      	b.n	8000e16 <fsm_modify_timer_control+0x6c2>
 8000994:	20000008 	.word	0x20000008
 8000998:	200000d0 	.word	0x200000d0
 800099c:	20000024 	.word	0x20000024
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	51eb851f 	.word	0x51eb851f
 80009a8:	20000010 	.word	0x20000010

	case MODIFY_GREEN1:

		//set mode to display
//		mode = 4;
		if (isTimer1Expired()) {
 80009ac:	f001 f89e 	bl	8001aec <isTimer1Expired>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d014      	beq.n	80009e0 <fsm_modify_timer_control+0x28c>
			setTimer1(50);
 80009b6:	2032      	movs	r0, #50	; 0x32
 80009b8:	f000 ff72 	bl	80018a0 <setTimer1>
			clearAllLed();
 80009bc:	f7ff fc3a 	bl	8000234 <clearAllLed>
			toggleGreen1();
 80009c0:	f7ff fc7a 	bl	80002b8 <toggleGreen1>
			counter_toggle++;
 80009c4:	4b7f      	ldr	r3, [pc, #508]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a7e      	ldr	r2, [pc, #504]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 80009cc:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 80009ce:	4b7d      	ldr	r3, [pc, #500]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	dd04      	ble.n	80009e0 <fsm_modify_timer_control+0x28c>
				counter_toggle = 0;
 80009d6:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
				toggleGreen2();
 80009dc:	f7ff fca2 	bl	8000324 <toggleGreen2>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 fb1d 	bl	8001020 <isButtonPressed>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d011      	beq.n	8000a10 <fsm_modify_timer_control+0x2bc>
			clearAllLed();
 80009ec:	f7ff fc22 	bl	8000234 <clearAllLed>
			//set new duration1 for green led
			green_duration1 = time_input * 100;
 80009f0:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2264      	movs	r2, #100	; 0x64
 80009f6:	fb02 f303 	mul.w	r3, r2, r3
 80009fa:	4a74      	ldr	r2, [pc, #464]	; (8000bcc <fsm_modify_timer_control+0x478>)
 80009fc:	6013      	str	r3, [r2, #0]
			time_input = 1;
 80009fe:	4b72      	ldr	r3, [pc, #456]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED2;
 8000a04:	4b72      	ldr	r3, [pc, #456]	; (8000bd0 <fsm_modify_timer_control+0x47c>)
 8000a06:	220f      	movs	r2, #15
 8000a08:	601a      	str	r2, [r3, #0]
			writeMessage("return"); //delete
 8000a0a:	4872      	ldr	r0, [pc, #456]	; (8000bd4 <fsm_modify_timer_control+0x480>)
 8000a0c:	f000 fa40 	bl	8000e90 <writeMessage>
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fb05 	bl	8001020 <isButtonPressed>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <fsm_modify_timer_control+0x2d4>
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f000 fb1f 	bl	8001060 <isButtonPressed1s>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01a      	beq.n	8000a5e <fsm_modify_timer_control+0x30a>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000a28:	4b67      	ldr	r3, [pc, #412]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	4b6a      	ldr	r3, [pc, #424]	; (8000bd8 <fsm_modify_timer_control+0x484>)
 8000a30:	fb83 1302 	smull	r1, r3, r3, r2
 8000a34:	1159      	asrs	r1, r3, #5
 8000a36:	17d3      	asrs	r3, r2, #31
 8000a38:	1acb      	subs	r3, r1, r3
 8000a3a:	2164      	movs	r1, #100	; 0x64
 8000a3c:	fb01 f303 	mul.w	r3, r1, r3
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a44:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000a46:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <fsm_modify_timer_control+0x300>
				time_input = 1; //1 is invalid value
 8000a4e:	4b5e      	ldr	r3, [pc, #376]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000a54:	4b5c      	ldr	r3, [pc, #368]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f9f9 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f000 fade 	bl	8001020 <isButtonPressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <fsm_modify_timer_control+0x322>
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 faf8 	bl	8001060 <isButtonPressed1s>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d010      	beq.n	8000a98 <fsm_modify_timer_control+0x344>
			time_input = (time_input - 1);
 8000a76:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a7e:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000a80:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <fsm_modify_timer_control+0x33a>
				time_input = 99; //0 is invalid value
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f9dc 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fac1 	bl	8001020 <isButtonPressed>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 81ba 	beq.w	8000e1a <fsm_modify_timer_control+0x6c6>
			clearAllLed();
 8000aa6:	f7ff fbc5 	bl	8000234 <clearAllLed>
			time_input = 1;
 8000aaa:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_RED2;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <fsm_modify_timer_control+0x47c>)
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ab6:	e1b0      	b.n	8000e1a <fsm_modify_timer_control+0x6c6>

	case MODIFY_RED2:

		//set mode to display
		if (isTimer1Expired()) {
 8000ab8:	f001 f818 	bl	8001aec <isTimer1Expired>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d014      	beq.n	8000aec <fsm_modify_timer_control+0x398>
			setTimer1(50);
 8000ac2:	2032      	movs	r0, #50	; 0x32
 8000ac4:	f000 feec 	bl	80018a0 <setTimer1>
			clearAllLed();
 8000ac8:	f7ff fbb4 	bl	8000234 <clearAllLed>
			toggleRed2();
 8000acc:	f7ff fc06 	bl	80002dc <toggleRed2>
			counter_toggle++;
 8000ad0:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 8000ad8:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000ada:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	dd04      	ble.n	8000aec <fsm_modify_timer_control+0x398>
				counter_toggle = 0;
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <fsm_modify_timer_control+0x470>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
				toggleRed1();
 8000ae8:	f7ff fbc2 	bl	8000270 <toggleRed1>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 fa97 	bl	8001020 <isButtonPressed>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d011      	beq.n	8000b1c <fsm_modify_timer_control+0x3c8>
			clearAllLed();
 8000af8:	f7ff fb9c 	bl	8000234 <clearAllLed>
			//set new duration1 for green led
			red_duration2 = time_input * 100;
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2264      	movs	r2, #100	; 0x64
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	4a35      	ldr	r2, [pc, #212]	; (8000bdc <fsm_modify_timer_control+0x488>)
 8000b08:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW2;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <fsm_modify_timer_control+0x47c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	601a      	str	r2, [r3, #0]
			writeMessage("return"); //delete
 8000b16:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <fsm_modify_timer_control+0x480>)
 8000b18:	f000 f9ba 	bl	8000e90 <writeMessage>
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fa7f 	bl	8001020 <isButtonPressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d105      	bne.n	8000b34 <fsm_modify_timer_control+0x3e0>
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 fa99 	bl	8001060 <isButtonPressed1s>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01a      	beq.n	8000b6a <fsm_modify_timer_control+0x416>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <fsm_modify_timer_control+0x484>)
 8000b3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b40:	1159      	asrs	r1, r3, #5
 8000b42:	17d3      	asrs	r3, r2, #31
 8000b44:	1acb      	subs	r3, r1, r3
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b50:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <fsm_modify_timer_control+0x40c>
				time_input = 1; //1 is invalid value
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f973 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000b6a:	2002      	movs	r0, #2
 8000b6c:	f000 fa58 	bl	8001020 <isButtonPressed>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <fsm_modify_timer_control+0x42e>
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 fa72 	bl	8001060 <isButtonPressed1s>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d010      	beq.n	8000ba4 <fsm_modify_timer_control+0x450>
			time_input = (time_input - 1);
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b8a:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <fsm_modify_timer_control+0x446>
				time_input = 99; //0 is invalid value
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b96:	2263      	movs	r2, #99	; 0x63
 8000b98:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f956 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fa3b 	bl	8001020 <isButtonPressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8136 	beq.w	8000e1e <fsm_modify_timer_control+0x6ca>
			clearAllLed();
 8000bb2:	f7ff fb3f 	bl	8000234 <clearAllLed>
			time_input = 1;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <fsm_modify_timer_control+0x474>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_YELLOW2;
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <fsm_modify_timer_control+0x47c>)
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000bc2:	e12c      	b.n	8000e1e <fsm_modify_timer_control+0x6ca>
 8000bc4:	200000d0 	.word	0x200000d0
 8000bc8:	20000024 	.word	0x20000024
 8000bcc:	20000014 	.word	0x20000014
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	08004604 	.word	0x08004604
 8000bd8:	51eb851f 	.word	0x51eb851f
 8000bdc:	20000018 	.word	0x20000018

	case MODIFY_YELLOW2:
		//set mode to display
		if (isTimer1Expired()) {
 8000be0:	f000 ff84 	bl	8001aec <isTimer1Expired>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d014      	beq.n	8000c14 <fsm_modify_timer_control+0x4c0>
			setTimer1(50);
 8000bea:	2032      	movs	r0, #50	; 0x32
 8000bec:	f000 fe58 	bl	80018a0 <setTimer1>
			clearAllLed();
 8000bf0:	f7ff fb20 	bl	8000234 <clearAllLed>
			toggleYellow2();
 8000bf4:	f7ff fb84 	bl	8000300 <toggleYellow2>
			counter_toggle++;
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a8b      	ldr	r2, [pc, #556]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000c00:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000c02:	4b8a      	ldr	r3, [pc, #552]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	dd04      	ble.n	8000c14 <fsm_modify_timer_control+0x4c0>
				counter_toggle = 0;
 8000c0a:	4b88      	ldr	r3, [pc, #544]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
				toggleYellow1();
 8000c10:	f7ff fb40 	bl	8000294 <toggleYellow1>
			}
		}

		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 fa03 	bl	8001020 <isButtonPressed>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d011      	beq.n	8000c44 <fsm_modify_timer_control+0x4f0>
			clearAllLed();
 8000c20:	f7ff fb08 	bl	8000234 <clearAllLed>
			//set new duration1 for yellow led
			yellow_duration2 = time_input * 100;
 8000c24:	4b82      	ldr	r3, [pc, #520]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	fb02 f303 	mul.w	r3, r2, r3
 8000c2e:	4a81      	ldr	r2, [pc, #516]	; (8000e34 <fsm_modify_timer_control+0x6e0>)
 8000c30:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN2;
 8000c38:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <fsm_modify_timer_control+0x6e4>)
 8000c3a:	2211      	movs	r2, #17
 8000c3c:	601a      	str	r2, [r3, #0]
			writeMessage("return"); //delete
 8000c3e:	487f      	ldr	r0, [pc, #508]	; (8000e3c <fsm_modify_timer_control+0x6e8>)
 8000c40:	f000 f926 	bl	8000e90 <writeMessage>
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 f9eb 	bl	8001020 <isButtonPressed>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d105      	bne.n	8000c5c <fsm_modify_timer_control+0x508>
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fa05 	bl	8001060 <isButtonPressed1s>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d01a      	beq.n	8000c92 <fsm_modify_timer_control+0x53e>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000c5c:	4b74      	ldr	r3, [pc, #464]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	4b77      	ldr	r3, [pc, #476]	; (8000e40 <fsm_modify_timer_control+0x6ec>)
 8000c64:	fb83 1302 	smull	r1, r3, r3, r2
 8000c68:	1159      	asrs	r1, r3, #5
 8000c6a:	17d3      	asrs	r3, r2, #31
 8000c6c:	1acb      	subs	r3, r1, r3
 8000c6e:	2164      	movs	r1, #100	; 0x64
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c78:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000c7a:	4b6d      	ldr	r3, [pc, #436]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <fsm_modify_timer_control+0x534>
				time_input = 1; //0 is invalid value
 8000c82:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000c88:	4b69      	ldr	r3, [pc, #420]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8df 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000c92:	2002      	movs	r0, #2
 8000c94:	f000 f9c4 	bl	8001020 <isButtonPressed>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d105      	bne.n	8000caa <fsm_modify_timer_control+0x556>
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f000 f9de 	bl	8001060 <isButtonPressed1s>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d010      	beq.n	8000ccc <fsm_modify_timer_control+0x578>
			time_input = (time_input - 1);
 8000caa:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000cb2:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <fsm_modify_timer_control+0x56e>
				time_input = 99; //0 is invalid value
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000cbe:	2263      	movs	r2, #99	; 0x63
 8000cc0:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f8c2 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f9a7 	bl	8001020 <isButtonPressed>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f000 80a4 	beq.w	8000e22 <fsm_modify_timer_control+0x6ce>
			clearAllLed();
 8000cda:	f7ff faab 	bl	8000234 <clearAllLed>
			time_input = 1;
 8000cde:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
			status3 = MODIFY_GREEN2;
 8000ce4:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <fsm_modify_timer_control+0x6e4>)
 8000ce6:	2211      	movs	r2, #17
 8000ce8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000cea:	e09a      	b.n	8000e22 <fsm_modify_timer_control+0x6ce>

	case MODIFY_GREEN2:
		//set mode to display
		if (isTimer1Expired()) {
 8000cec:	f000 fefe 	bl	8001aec <isTimer1Expired>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d014      	beq.n	8000d20 <fsm_modify_timer_control+0x5cc>
			setTimer1(50);
 8000cf6:	2032      	movs	r0, #50	; 0x32
 8000cf8:	f000 fdd2 	bl	80018a0 <setTimer1>
			clearAllLed();
 8000cfc:	f7ff fa9a 	bl	8000234 <clearAllLed>
			toggleGreen2();
 8000d00:	f7ff fb10 	bl	8000324 <toggleGreen2>
			counter_toggle++;
 8000d04:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000d0c:	6013      	str	r3, [r2, #0]
			if (counter_toggle > 2) {
 8000d0e:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dd04      	ble.n	8000d20 <fsm_modify_timer_control+0x5cc>
				counter_toggle = 0;
 8000d16:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <fsm_modify_timer_control+0x6d8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
				toggleGreen1();
 8000d1c:	f7ff facc 	bl	80002b8 <toggleGreen1>
			}
		}
		//check if user want to apply new duration1 and return auto mode
		if (isButtonPressed(RETURN)) {
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f97d 	bl	8001020 <isButtonPressed>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d017      	beq.n	8000d5c <fsm_modify_timer_control+0x608>
			clearAllLed();
 8000d2c:	f7ff fa82 	bl	8000234 <clearAllLed>
			//set new duration1 for green led
			green_duration2 = time_input * 100;
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	4a42      	ldr	r2, [pc, #264]	; (8000e44 <fsm_modify_timer_control+0x6f0>)
 8000d3c:	6013      	str	r3, [r2, #0]
			time_input = 1;
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
			//turn on return flag for the fsm auto can change it's state
			returnFlag1 = 1;
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <fsm_modify_timer_control+0x6f4>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
			returnFlag2 = 1;
 8000d4a:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <fsm_modify_timer_control+0x6f8>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
			status3 = WAIT;
 8000d50:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <fsm_modify_timer_control+0x6e4>)
 8000d52:	2212      	movs	r2, #18
 8000d54:	601a      	str	r2, [r3, #0]
			//set display pointer back to normal
			writeMessage("return"); //delete
 8000d56:	4839      	ldr	r0, [pc, #228]	; (8000e3c <fsm_modify_timer_control+0x6e8>)
 8000d58:	f000 f89a 	bl	8000e90 <writeMessage>
		}

		//check if user want to increase time
		if (isButtonPressed(INC_TIME) || isButtonPressed1s(INC_TIME)) {
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 f95f 	bl	8001020 <isButtonPressed>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <fsm_modify_timer_control+0x620>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 f979 	bl	8001060 <isButtonPressed1s>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d01a      	beq.n	8000daa <fsm_modify_timer_control+0x656>
			time_input = (time_input + 1) % 100; //99 is the max value
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <fsm_modify_timer_control+0x6ec>)
 8000d7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d80:	1159      	asrs	r1, r3, #5
 8000d82:	17d3      	asrs	r3, r2, #31
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	2164      	movs	r1, #100	; 0x64
 8000d88:	fb01 f303 	mul.w	r3, r1, r3
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d90:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <fsm_modify_timer_control+0x64c>
				time_input = 1; //1 is invalid value
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f853 	bl	8000e50 <writeMess>
		}

		//decrease time
		if (isButtonPressed(DEC_TIME) || isButtonPressed1s(DEC_TIME)) {
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 f938 	bl	8001020 <isButtonPressed>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <fsm_modify_timer_control+0x66e>
 8000db6:	2002      	movs	r0, #2
 8000db8:	f000 f952 	bl	8001060 <isButtonPressed1s>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d010      	beq.n	8000de4 <fsm_modify_timer_control+0x690>
			time_input = (time_input - 1);
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000dca:	6013      	str	r3, [r2, #0]
			if (time_input == 0)
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <fsm_modify_timer_control+0x686>
				time_input = 99; //0 is invalid value
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000dd6:	2263      	movs	r2, #99	; 0x63
 8000dd8:	601a      	str	r2, [r3, #0]
			writeMess(time_input);
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f836 	bl	8000e50 <writeMess>
		}

		//check if user want to change mode
		if (isButtonPressed(CONTROL_MODE)) {
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f91b 	bl	8001020 <isButtonPressed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01a      	beq.n	8000e26 <fsm_modify_timer_control+0x6d2>
			time_input = 1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <fsm_modify_timer_control+0x6dc>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]
			clearAllLed();
 8000df6:	f7ff fa1d 	bl	8000234 <clearAllLed>
			returnFlag1 = 1;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <fsm_modify_timer_control+0x6f4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
			returnFlag2 = 1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <fsm_modify_timer_control+0x6f8>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			status3 = WAIT;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <fsm_modify_timer_control+0x6e4>)
 8000e08:	2212      	movs	r2, #18
 8000e0a:	601a      	str	r2, [r3, #0]
			//set display pointer back to normal
		}
		break;
 8000e0c:	e00b      	b.n	8000e26 <fsm_modify_timer_control+0x6d2>
	case WAIT:
		//DO NOTHING
		break;

	default:
		break;
 8000e0e:	bf00      	nop
 8000e10:	e00a      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e12:	bf00      	nop
 8000e14:	e008      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e16:	bf00      	nop
 8000e18:	e006      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e1a:	bf00      	nop
 8000e1c:	e004      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e1e:	bf00      	nop
 8000e20:	e002      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e22:	bf00      	nop
 8000e24:	e000      	b.n	8000e28 <fsm_modify_timer_control+0x6d4>
		break;
 8000e26:	bf00      	nop
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000d0 	.word	0x200000d0
 8000e30:	20000024 	.word	0x20000024
 8000e34:	2000001c 	.word	0x2000001c
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	08004604 	.word	0x08004604
 8000e40:	51eb851f 	.word	0x51eb851f
 8000e44:	20000020 	.word	0x20000020
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	200000c4 	.word	0x200000c4

08000e50 <writeMess>:
int status4 = PEDESTRIAN_OFF;
int state = 0;
int state2 = 0;
int counter_toggle = 0;

void writeMess(int time){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	char str[32];
	sprintf((char*) str, "!7SEG:%02d#\r\n", time);
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	490a      	ldr	r1, [pc, #40]	; (8000e88 <writeMess+0x38>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 ff49 	bl	8003cf8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f96e 	bl	800014c <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f107 0108 	add.w	r1, r7, #8
 8000e78:	230a      	movs	r3, #10
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <writeMess+0x3c>)
 8000e7c:	f002 fd9f 	bl	80039be <HAL_UART_Transmit>
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0800460c 	.word	0x0800460c
 8000e8c:	20000190 	.word	0x20000190

08000e90 <writeMessage>:
void writeMessage(char * str){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff f957 	bl	800014c <strlen>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <writeMessage+0x24>)
 8000ea8:	f002 fd89 	bl	80039be <HAL_UART_Transmit>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000190 	.word	0x20000190

08000eb8 <button_reading>:
		flagForButtonPress1s[i] = BUTTON_FLAG_CLEAR;
		counterForButtonPress1s[i] = 0;
	}
}

void button_reading(void) {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e092      	b.n	8000fea <button_reading+0x132>
		//propagate buffer stage 2 to stage 3
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000ec4:	79fa      	ldrb	r2, [r7, #7]
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	494c      	ldr	r1, [pc, #304]	; (8000ffc <button_reading+0x144>)
 8000eca:	5c89      	ldrb	r1, [r1, r2]
 8000ecc:	4a4c      	ldr	r2, [pc, #304]	; (8001000 <button_reading+0x148>)
 8000ece:	54d1      	strb	r1, [r2, r3]
		//propagate buffer stage 1 to stage 2
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	494b      	ldr	r1, [pc, #300]	; (8001004 <button_reading+0x14c>)
 8000ed6:	5c89      	ldrb	r1, [r1, r2]
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <button_reading+0x144>)
 8000eda:	54d1      	strb	r1, [r2, r3]
		//update the lasted button state in buffer 1
		//debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(INPUT_PORT, buttonPin[i]);
		if (i == 0) {
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <button_reading+0x3e>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port,
 8000ee2:	79fc      	ldrb	r4, [r7, #7]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4848      	ldr	r0, [pc, #288]	; (8001008 <button_reading+0x150>)
 8000ee8:	f001 f974 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b44      	ldr	r3, [pc, #272]	; (8001004 <button_reading+0x14c>)
 8000ef2:	551a      	strb	r2, [r3, r4]
 8000ef4:	e025      	b.n	8000f42 <button_reading+0x8a>
			Button0_Pin);
		} else if (i == 1) {
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d109      	bne.n	8000f10 <button_reading+0x58>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port,
 8000efc:	79fc      	ldrb	r4, [r7, #7]
 8000efe:	2102      	movs	r1, #2
 8000f00:	4841      	ldr	r0, [pc, #260]	; (8001008 <button_reading+0x150>)
 8000f02:	f001 f967 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <button_reading+0x14c>)
 8000f0c:	551a      	strb	r2, [r3, r4]
 8000f0e:	e018      	b.n	8000f42 <button_reading+0x8a>
			Button1_Pin);
		} else if (i == 2) {
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d109      	bne.n	8000f2a <button_reading+0x72>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port,
 8000f16:	79fc      	ldrb	r4, [r7, #7]
 8000f18:	2110      	movs	r1, #16
 8000f1a:	483b      	ldr	r0, [pc, #236]	; (8001008 <button_reading+0x150>)
 8000f1c:	f001 f95a 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b37      	ldr	r3, [pc, #220]	; (8001004 <button_reading+0x14c>)
 8000f26:	551a      	strb	r2, [r3, r4]
 8000f28:	e00b      	b.n	8000f42 <button_reading+0x8a>
			Button2_Pin);
		} else if (i == 3) {
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d108      	bne.n	8000f42 <button_reading+0x8a>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port,
 8000f30:	79fc      	ldrb	r4, [r7, #7]
 8000f32:	2101      	movs	r1, #1
 8000f34:	4835      	ldr	r0, [pc, #212]	; (800100c <button_reading+0x154>)
 8000f36:	f001 f94d 	bl	80021d4 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <button_reading+0x14c>)
 8000f40:	551a      	strb	r2, [r3, r4]
			Button3_Pin);
		}
		if ((debounceButtonBuffer2[i] == debounceButtonBuffer1[i])
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <button_reading+0x144>)
 8000f46:	5cd2      	ldrb	r2, [r2, r3]
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	492e      	ldr	r1, [pc, #184]	; (8001004 <button_reading+0x14c>)
 8000f4c:	5ccb      	ldrb	r3, [r1, r3]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d148      	bne.n	8000fe4 <button_reading+0x12c>
				&& (debounceButtonBuffer2[i] == debounceButtonBuffer3[i])) {
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <button_reading+0x144>)
 8000f56:	5cd2      	ldrb	r2, [r2, r3]
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	4929      	ldr	r1, [pc, #164]	; (8001000 <button_reading+0x148>)
 8000f5c:	5ccb      	ldrb	r3, [r1, r3]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d140      	bne.n	8000fe4 <button_reading+0x12c>
			if (debounceButtonBuffer3[i] != debounceButtonBuffer4[i]) {
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	4a26      	ldr	r2, [pc, #152]	; (8001000 <button_reading+0x148>)
 8000f66:	5cd2      	ldrb	r2, [r2, r3]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4929      	ldr	r1, [pc, #164]	; (8001010 <button_reading+0x158>)
 8000f6c:	5ccb      	ldrb	r3, [r1, r3]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d01a      	beq.n	8000fa8 <button_reading+0xf0>
				//state different, mean there's a transition in button state
				debounceButtonBuffer4[i] = debounceButtonBuffer3[i];
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4922      	ldr	r1, [pc, #136]	; (8001000 <button_reading+0x148>)
 8000f78:	5c89      	ldrb	r1, [r1, r2]
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <button_reading+0x158>)
 8000f7c:	54d1      	strb	r1, [r2, r3]
				if (debounceButtonBuffer4[i] == BUTTON_IS_PRESSED) {
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <button_reading+0x158>)
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <button_reading+0xdc>
					//on falling edge of transition
//					TimeOutForKeyPress = 500;   //additional feature
					buttonFlags[i] = BUTTON_FLAG_SET;
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <button_reading+0x15c>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f92:	e027      	b.n	8000fe4 <button_reading+0x12c>
				} else {
					//rising eadge, which mean button is release;
//					TimeOutForKeyPress[i]--;
					counterForButtonPress1s[i] = 0;
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4a20      	ldr	r2, [pc, #128]	; (8001018 <button_reading+0x160>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					debounceButtonBuffer4[i] = BUTTON_IS_RELEASED;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <button_reading+0x158>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	54d1      	strb	r1, [r2, r3]
 8000fa6:	e01d      	b.n	8000fe4 <button_reading+0x12c>
				}
			} else {
				//buffer same state, which mean key is still hold, increase counter
				if (debounceButtonBuffer4[i] == BUTTON_IS_PRESSED) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <button_reading+0x158>)
 8000fac:	5cd3      	ldrb	r3, [r2, r3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <button_reading+0x12c>
					if (counterForButtonPress1s[i]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a18      	ldr	r2, [pc, #96]	; (8001018 <button_reading+0x160>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	2b31      	cmp	r3, #49	; 0x31
 8000fbc:	d812      	bhi.n	8000fe4 <button_reading+0x12c>
							< DURATION_FOR_AUTO_INCREASING) {
						counterForButtonPress1s[i]++;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a15      	ldr	r2, [pc, #84]	; (8001018 <button_reading+0x160>)
 8000fc2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	b291      	uxth	r1, r2
 8000fca:	4a13      	ldr	r2, [pc, #76]	; (8001018 <button_reading+0x160>)
 8000fcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if (counterForButtonPress1s[i]
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <button_reading+0x160>)
 8000fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fd8:	2b32      	cmp	r3, #50	; 0x32
 8000fda:	d103      	bne.n	8000fe4 <button_reading+0x12c>
								== DURATION_FOR_AUTO_INCREASING) {
							flagForButtonPress1s[i] = BUTTON_FLAG_SET;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <button_reading+0x164>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < NO_OF_BUTTONS; i++) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	f67f af69 	bls.w	8000ec4 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	200000e8 	.word	0x200000e8
 8001000:	200000ec 	.word	0x200000ec
 8001004:	200000e4 	.word	0x200000e4
 8001008:	40010800 	.word	0x40010800
 800100c:	40010c00 	.word	0x40010c00
 8001010:	200000f0 	.word	0x200000f0
 8001014:	200000d4 	.word	0x200000d4
 8001018:	200000f8 	.word	0x200000f8
 800101c:	200000f4 	.word	0x200000f4

08001020 <isButtonPressed>:

unsigned char isButtonPressed(unsigned char index) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d901      	bls.n	8001034 <isButtonPressed+0x14>
		return 0;
 8001030:	2300      	movs	r3, #0
 8001032:	e00d      	b.n	8001050 <isButtonPressed+0x30>
	if (buttonFlags[index] == BUTTON_FLAG_SET) {
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <isButtonPressed+0x3c>)
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d106      	bne.n	800104e <isButtonPressed+0x2e>
		//clear button flags and return
		buttonFlags[index] = BUTTON_FLAG_CLEAR;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a06      	ldr	r2, [pc, #24]	; (800105c <isButtonPressed+0x3c>)
 8001044:	2100      	movs	r1, #0
 8001046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <isButtonPressed+0x30>
	} else
		return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200000d4 	.word	0x200000d4

08001060 <isButtonPressed1s>:

unsigned char isButtonPressed1s(unsigned char index) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b03      	cmp	r3, #3
 800106e:	d901      	bls.n	8001074 <isButtonPressed1s+0x14>
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e010      	b.n	8001096 <isButtonPressed1s+0x36>
	if (flagForButtonPress1s[index] == BUTTON_FLAG_SET) {
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <isButtonPressed1s+0x40>)
 8001078:	5cd3      	ldrb	r3, [r2, r3]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d10a      	bne.n	8001094 <isButtonPressed1s+0x34>
		//clear button hold more than 1s flags and return
		flagForButtonPress1s[index] = BUTTON_FLAG_CLEAR;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <isButtonPressed1s+0x40>)
 8001082:	2100      	movs	r1, #0
 8001084:	54d1      	strb	r1, [r2, r3]
		//clear counter
		counterForButtonPress1s[index] = 0;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <isButtonPressed1s+0x44>)
 800108a:	2100      	movs	r1, #0
 800108c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <isButtonPressed1s+0x36>
	} else
		return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200000f4 	.word	0x200000f4
 80010a4:	200000f8 	.word	0x200000f8

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f000 fd9e 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f820 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 f94c 	bl	8001350 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010b8:	f000 f85e 	bl	8001178 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80010bc:	f000 f91e 	bl	80012fc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80010c0:	f000 f8a6 	bl	8001210 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <main+0x44>)
 80010c6:	f001 fd1f 	bl	8002b08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <main+0x48>)
 80010ce:	f001 fdc5 	bl	8002c5c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(50);
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f000 fbe4 	bl	80018a0 <setTimer1>
	while (1) {
		fsm1_automatic_run();
 80010d8:	f7ff f936 	bl	8000348 <fsm1_automatic_run>
		fsm2_automatic_run();
 80010dc:	f7ff fa82 	bl	80005e4 <fsm2_automatic_run>
		fsm_modify_timer_control();
 80010e0:	f7ff fb38 	bl	8000754 <fsm_modify_timer_control>
		fsm_pedestrian();
 80010e4:	f000 f9b4 	bl	8001450 <fsm_pedestrian>
		fsm1_automatic_run();
 80010e8:	e7f6      	b.n	80010d8 <main+0x30>
 80010ea:	bf00      	nop
 80010ec:	20000100 	.word	0x20000100
 80010f0:	20000148 	.word	0x20000148

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b090      	sub	sp, #64	; 0x40
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2228      	movs	r2, #40	; 0x28
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fdf0 	bl	8003ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800112a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f87d 	bl	8002234 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001140:	f000 f980 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2102      	movs	r1, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 faea 	bl	8002738 <HAL_RCC_ClockConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800116a:	f000 f96b 	bl	8001444 <Error_Handler>
  }
}
 800116e:	bf00      	nop
 8001170:	3740      	adds	r7, #64	; 0x40
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_TIM2_Init+0x94>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_TIM2_Init+0x94>)
 800119e:	223f      	movs	r2, #63	; 0x3f
 80011a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_TIM2_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_TIM2_Init+0x94>)
 80011aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80011ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_TIM2_Init+0x94>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_TIM2_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011bc:	4813      	ldr	r0, [pc, #76]	; (800120c <MX_TIM2_Init+0x94>)
 80011be:	f001 fc53 	bl	8002a68 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011c8:	f000 f93c 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM2_Init+0x94>)
 80011da:	f001 ffa7 	bl	800312c <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 f92e 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM2_Init+0x94>)
 80011f6:	f002 fb25 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001200:	f000 f920 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000100 	.word	0x20000100

08001210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001240:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001242:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <MX_TIM3_Init+0xe8>)
 8001244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001248:	223f      	movs	r2, #63	; 0x3f
 800124a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_TIM3_Init+0xe4>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001254:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001258:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_TIM3_Init+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001266:	4823      	ldr	r0, [pc, #140]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001268:	f001 fbfe 	bl	8002a68 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001272:	f000 f8e7 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001284:	f001 ff52 	bl	800312c <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800128e:	f000 f8d9 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001292:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MX_TIM3_Init+0xe4>)
 8001294:	f001 fc8a 	bl	8002bac <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800129e:	f000 f8d1 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_TIM3_Init+0xe4>)
 80012b2:	f002 fac7 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012bc:	f000 f8c2 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM3_Init+0xe4>)
 80012d8:	f001 fe6a 	bl	8002fb0 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012e2:	f000 f8af 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM3_Init+0xe4>)
 80012e8:	f000 f9f0 	bl	80016cc <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3738      	adds	r7, #56	; 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000148 	.word	0x20000148
 80012f8:	40000400 	.word	0x40000400

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	2208      	movs	r2, #8
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f002 faf6 	bl	8003924 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f881 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000190 	.word	0x20000190
 800134c:	40004400 	.word	0x40004400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a2d      	ldr	r2, [pc, #180]	; (8001420 <MX_GPIO_Init+0xd0>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <MX_GPIO_Init+0xd0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <MX_GPIO_Init+0xd0>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <MX_GPIO_Init+0xd0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L2_EN0_Pin|L0_EN1_Pin|L1_EN1_Pin|L1_EN0_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800139a:	4822      	ldr	r0, [pc, #136]	; (8001424 <MX_GPIO_Init+0xd4>)
 800139c:	f000 ff31 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L2_EN1_Pin|L0_EN0_Pin, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_GPIO_Init+0xd8>)
 80013a8:	f000 ff2b 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80013ac:	2313      	movs	r3, #19
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <MX_GPIO_Init+0xd8>)
 80013c0:	f000 fd84 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	4813      	ldr	r0, [pc, #76]	; (8001424 <MX_GPIO_Init+0xd4>)
 80013d8:	f000 fd78 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_EN0_Pin L0_EN1_Pin L1_EN1_Pin L1_EN0_Pin */
  GPIO_InitStruct.Pin = L2_EN0_Pin|L0_EN1_Pin|L1_EN1_Pin|L1_EN0_Pin;
 80013dc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80013e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2302      	movs	r3, #2
 80013ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <MX_GPIO_Init+0xd4>)
 80013f6:	f000 fd69 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : L2_EN1_Pin L0_EN0_Pin */
  GPIO_InitStruct.Pin = L2_EN1_Pin|L0_EN0_Pin;
 80013fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80013fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2302      	movs	r3, #2
 800140a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_GPIO_Init+0xd8>)
 8001414:	f000 fd5a 	bl	8001ecc <HAL_GPIO_Init>

}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40010800 	.word	0x40010800

0800142c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	timerRun();
 8001434:	f000 fac8 	bl	80019c8 <timerRun>
	button_reading();
 8001438:	f7ff fd3e 	bl	8000eb8 <button_reading>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <fsm_pedestrian>:
 *      Author: ADMIN
 */

#include "pedestrian.h"

void fsm_pedestrian() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	switch (status4) {
 8001454:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <fsm_pedestrian+0x190>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b15      	cmp	r3, #21
 800145a:	d07a      	beq.n	8001552 <fsm_pedestrian+0x102>
 800145c:	2b15      	cmp	r3, #21
 800145e:	f300 80bc 	bgt.w	80015da <fsm_pedestrian+0x18a>
 8001462:	2b13      	cmp	r3, #19
 8001464:	d002      	beq.n	800146c <fsm_pedestrian+0x1c>
 8001466:	2b14      	cmp	r3, #20
 8001468:	d046      	beq.n	80014f8 <fsm_pedestrian+0xa8>
				setTimer5(1000);
			}
		}
		break;
	}
}
 800146a:	e0b6      	b.n	80015da <fsm_pedestrian+0x18a>
		HAL_GPIO_WritePin(L2_EN0_GPIO_Port, L2_EN0_Pin, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	485c      	ldr	r0, [pc, #368]	; (80015e4 <fsm_pedestrian+0x194>)
 8001474:	f000 fec5 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_EN1_GPIO_Port, L2_EN1_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147e:	485a      	ldr	r0, [pc, #360]	; (80015e8 <fsm_pedestrian+0x198>)
 8001480:	f000 febf 	bl	8002202 <HAL_GPIO_WritePin>
		if (isTimer5Expired()) {
 8001484:	f000 fb68 	bl	8001b58 <isTimer5Expired>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <fsm_pedestrian+0x44>
			status4 = PEDESTRIAN_OFF;
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <fsm_pedestrian+0x190>)
 8001490:	2215      	movs	r2, #21
 8001492:	601a      	str	r2, [r3, #0]
		if (isTimer6Expired()) {
 8001494:	f000 fb72 	bl	8001b7c <isTimer6Expired>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d012      	beq.n	80014c4 <fsm_pedestrian+0x74>
			if (timeCountdown1 <= 5) {
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <fsm_pedestrian+0x19c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	dc0e      	bgt.n	80014c4 <fsm_pedestrian+0x74>
				__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,(5-timeCountdown1)*20);
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <fsm_pedestrian+0x19c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f1c3 0205 	rsb	r2, r3, #5
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <fsm_pedestrian+0x1a0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
				setTimer6(100);
 80014be:	2064      	movs	r0, #100	; 0x64
 80014c0:	f000 fa3e 	bl	8001940 <setTimer6>
		if (status1 == AUTO_GREEN || status1 == AUTO_YELLOW) {
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <fsm_pedestrian+0x1a4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d003      	beq.n	80014d4 <fsm_pedestrian+0x84>
 80014cc:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <fsm_pedestrian+0x1a4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d106      	bne.n	80014e2 <fsm_pedestrian+0x92>
			status4 = PEDESTRIAN_RUN_NOT_ALLOW;
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <fsm_pedestrian+0x190>)
 80014d6:	2214      	movs	r2, #20
 80014d8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 80014da:	4b45      	ldr	r3, [pc, #276]	; (80015f0 <fsm_pedestrian+0x1a0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
		if (isButtonPressed(3)) {
 80014e2:	2003      	movs	r0, #3
 80014e4:	f7ff fd9c 	bl	8001020 <isButtonPressed>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d070      	beq.n	80015d0 <fsm_pedestrian+0x180>
			setTimer5(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f000 fa11 	bl	8001918 <setTimer5>
		break;
 80014f6:	e06b      	b.n	80015d0 <fsm_pedestrian+0x180>
		HAL_GPIO_WritePin(L2_EN0_GPIO_Port, L2_EN0_Pin, SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fe:	4839      	ldr	r0, [pc, #228]	; (80015e4 <fsm_pedestrian+0x194>)
 8001500:	f000 fe7f 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_EN1_GPIO_Port, L2_EN1_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4837      	ldr	r0, [pc, #220]	; (80015e8 <fsm_pedestrian+0x198>)
 800150c:	f000 fe79 	bl	8002202 <HAL_GPIO_WritePin>
		if (isTimer5Expired()) {
 8001510:	f000 fb22 	bl	8001b58 <isTimer5Expired>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <fsm_pedestrian+0xd8>
			status4 = PEDESTRIAN_OFF;
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <fsm_pedestrian+0x190>)
 800151c:	2215      	movs	r2, #21
 800151e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <fsm_pedestrian+0x1a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
		if (status1 == AUTO_RED) {
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <fsm_pedestrian+0x1a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d105      	bne.n	800153c <fsm_pedestrian+0xec>
			status4 = PEDESTRIAN_RUN_ALLOW;
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <fsm_pedestrian+0x190>)
 8001532:	2213      	movs	r2, #19
 8001534:	601a      	str	r2, [r3, #0]
			setTimer6(100);
 8001536:	2064      	movs	r0, #100	; 0x64
 8001538:	f000 fa02 	bl	8001940 <setTimer6>
		if (isButtonPressed(3)) {
 800153c:	2003      	movs	r0, #3
 800153e:	f7ff fd6f 	bl	8001020 <isButtonPressed>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d045      	beq.n	80015d4 <fsm_pedestrian+0x184>
			setTimer5(1000);
 8001548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154c:	f000 f9e4 	bl	8001918 <setTimer5>
		break;
 8001550:	e040      	b.n	80015d4 <fsm_pedestrian+0x184>
		HAL_GPIO_WritePin(L2_EN0_GPIO_Port, L2_EN0_Pin, RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4822      	ldr	r0, [pc, #136]	; (80015e4 <fsm_pedestrian+0x194>)
 800155a:	f000 fe52 	bl	8002202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2_EN1_GPIO_Port, L2_EN1_Pin, RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <fsm_pedestrian+0x198>)
 8001566:	f000 fe4c 	bl	8002202 <HAL_GPIO_WritePin>
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <fsm_pedestrian+0x1a0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
		if (status1 != WAIT) {
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <fsm_pedestrian+0x1a4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b12      	cmp	r3, #18
 8001578:	d02e      	beq.n	80015d8 <fsm_pedestrian+0x188>
			if(status1 == AUTO_RED && isButtonPressed(3)){
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <fsm_pedestrian+0x1a4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d110      	bne.n	80015a4 <fsm_pedestrian+0x154>
 8001582:	2003      	movs	r0, #3
 8001584:	f7ff fd4c 	bl	8001020 <isButtonPressed>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00a      	beq.n	80015a4 <fsm_pedestrian+0x154>
				status4 = PEDESTRIAN_RUN_ALLOW;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <fsm_pedestrian+0x190>)
 8001590:	2213      	movs	r2, #19
 8001592:	601a      	str	r2, [r3, #0]
				setTimer5(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f000 f9be 	bl	8001918 <setTimer5>
				setTimer6(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f000 f9cf 	bl	8001940 <setTimer6>
		break;
 80015a2:	e019      	b.n	80015d8 <fsm_pedestrian+0x188>
			else if((status1 == AUTO_GREEN || status1 == AUTO_YELLOW) && isButtonPressed(3)) {
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <fsm_pedestrian+0x1a4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d003      	beq.n	80015b4 <fsm_pedestrian+0x164>
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <fsm_pedestrian+0x1a4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d111      	bne.n	80015d8 <fsm_pedestrian+0x188>
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff fd33 	bl	8001020 <isButtonPressed>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <fsm_pedestrian+0x188>
				status4 = PEDESTRIAN_RUN_NOT_ALLOW;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <fsm_pedestrian+0x190>)
 80015c2:	2214      	movs	r2, #20
 80015c4:	601a      	str	r2, [r3, #0]
				setTimer5(1000);
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f000 f9a5 	bl	8001918 <setTimer5>
		break;
 80015ce:	e003      	b.n	80015d8 <fsm_pedestrian+0x188>
		break;
 80015d0:	bf00      	nop
 80015d2:	e002      	b.n	80015da <fsm_pedestrian+0x18a>
		break;
 80015d4:	bf00      	nop
 80015d6:	e000      	b.n	80015da <fsm_pedestrian+0x18a>
		break;
 80015d8:	bf00      	nop
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000028 	.word	0x20000028
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40010800 	.word	0x40010800
 80015ec:	200000b8 	.word	0x200000b8
 80015f0:	20000148 	.word	0x20000148
 80015f4:	20000000 	.word	0x20000000

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_MspInit+0x5c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_MspInit+0x5c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_MspInit+0x5c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_MspInit+0x5c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_MspInit+0x60>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_MspInit+0x60>)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d114      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201c      	movs	r0, #28
 800168c:	f000 fbe7 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 fc00 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001696:	e010      	b.n	80016ba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d10b      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40000400 	.word	0x40000400

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_TIM_MspPostInit+0x58>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d117      	bne.n	800171c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_TIM_MspPostInit+0x5c>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_TIM_MspPostInit+0x5c>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_TIM_MspPostInit+0x5c>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001704:	2340      	movs	r3, #64	; 0x40
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2302      	movs	r3, #2
 800170e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <HAL_TIM_MspPostInit+0x60>)
 8001718:	f000 fbd8 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40000400 	.word	0x40000400
 8001728:	40021000 	.word	0x40021000
 800172c:	40010800 	.word	0x40010800

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <HAL_UART_MspInit+0x88>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d12f      	bne.n	80017b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_UART_MspInit+0x8c>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_UART_MspInit+0x8c>)
 8001756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_UART_MspInit+0x8c>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_UART_MspInit+0x8c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_UART_MspInit+0x8c>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0x8c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001780:	2304      	movs	r3, #4
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <HAL_UART_MspInit+0x90>)
 8001794:	f000 fb9a 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001798:	2308      	movs	r3, #8
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <HAL_UART_MspInit+0x90>)
 80017ac:	f000 fb8e 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 fa35 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM2_IRQHandler+0x10>)
 800181a:	f001 fac1 	bl	8002da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000100 	.word	0x20000100

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f002 fa1c 	bl	8003c94 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20005000 	.word	0x20005000
 8001888:	00000400 	.word	0x00000400
 800188c:	200001d4 	.word	0x200001d4
 8001890:	20000228 	.word	0x20000228

08001894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <setTimer1>:
void setTimer0(int duration) {
	timer0_cnt = duration;
	timer0_flag = 0;
}

void setTimer1(int duration) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timer1_cnt = duration;
 80018a8:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <setTimer1+0x20>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <setTimer1+0x24>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200001dc 	.word	0x200001dc
 80018c4:	200001f8 	.word	0x200001f8

080018c8 <setTimer2>:
void setTimer2(int duration) {
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	timer2_cnt = duration;
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <setTimer2+0x20>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <setTimer2+0x24>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	200001e0 	.word	0x200001e0
 80018ec:	200001fc 	.word	0x200001fc

080018f0 <setTimer3>:

void setTimer3(int duration) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	timer3_cnt = duration;
 80018f8:	4a05      	ldr	r2, [pc, #20]	; (8001910 <setTimer3+0x20>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <setTimer3+0x24>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200001e4 	.word	0x200001e4
 8001914:	20000200 	.word	0x20000200

08001918 <setTimer5>:
void setTimer4(int duration) {
	timer4_cnt = duration;
	timer4_flag = 0;
}

void setTimer5(int duration) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	timer5_cnt = duration;
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <setTimer5+0x20>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <setTimer5+0x24>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200001ec 	.word	0x200001ec
 800193c:	20000208 	.word	0x20000208

08001940 <setTimer6>:

void setTimer6(int duration) {
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	timer6_cnt = duration;
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <setTimer6+0x20>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <setTimer6+0x24>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200001f0 	.word	0x200001f0
 8001964:	2000020c 	.word	0x2000020c

08001968 <clearTimer1>:
void clearTimer0() {
	timer0_cnt = 0;
	timer0_flag = 0;
}

void clearTimer1() {
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	timer1_cnt = 0;
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <clearTimer1+0x18>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <clearTimer1+0x1c>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	200001dc 	.word	0x200001dc
 8001984:	200001f8 	.word	0x200001f8

08001988 <clearTimer2>:

void clearTimer2() {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	timer2_cnt = 0;
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <clearTimer2+0x18>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <clearTimer2+0x1c>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	200001e0 	.word	0x200001e0
 80019a4:	200001fc 	.word	0x200001fc

080019a8 <clearTimer3>:

void clearTimer3() {
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	timer3_cnt = 0;
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <clearTimer3+0x18>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <clearTimer3+0x1c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	200001e4 	.word	0x200001e4
 80019c4:	20000200 	.word	0x20000200

080019c8 <timerRun>:
void clearTimer6() {
	timer6_cnt = 0;
	timer6_flag = 0;
}

void timerRun() {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	if (timer0_cnt > 0) {
 80019cc:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <timerRun+0xec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd0b      	ble.n	80019ec <timerRun+0x24>
		timer0_cnt--;
 80019d4:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <timerRun+0xec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a36      	ldr	r2, [pc, #216]	; (8001ab4 <timerRun+0xec>)
 80019dc:	6013      	str	r3, [r2, #0]
		if (timer0_cnt <= 0)
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <timerRun+0xec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	dc02      	bgt.n	80019ec <timerRun+0x24>
			timer0_flag = 1;
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <timerRun+0xf0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
	}
	if (timer1_cnt > 0) {
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <timerRun+0xf4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dd0b      	ble.n	8001a0c <timerRun+0x44>
		timer1_cnt--;
 80019f4:	4b31      	ldr	r3, [pc, #196]	; (8001abc <timerRun+0xf4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a30      	ldr	r2, [pc, #192]	; (8001abc <timerRun+0xf4>)
 80019fc:	6013      	str	r3, [r2, #0]
		if (timer1_cnt <= 0)
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <timerRun+0xf4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc02      	bgt.n	8001a0c <timerRun+0x44>
			timer1_flag = 1;
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <timerRun+0xf8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
	}
	if (timer2_cnt > 0) {
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <timerRun+0xfc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	dd0b      	ble.n	8001a2c <timerRun+0x64>
		timer2_cnt--;
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <timerRun+0xfc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <timerRun+0xfc>)
 8001a1c:	6013      	str	r3, [r2, #0]
		if (timer2_cnt <= 0)
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <timerRun+0xfc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc02      	bgt.n	8001a2c <timerRun+0x64>
			timer2_flag = 1;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <timerRun+0x100>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
	}
	if (timer3_cnt > 0) {
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <timerRun+0x104>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dd0b      	ble.n	8001a4c <timerRun+0x84>
		timer3_cnt--;
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <timerRun+0x104>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a24      	ldr	r2, [pc, #144]	; (8001acc <timerRun+0x104>)
 8001a3c:	6013      	str	r3, [r2, #0]
		if (timer3_cnt <= 0)
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <timerRun+0x104>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dc02      	bgt.n	8001a4c <timerRun+0x84>
			timer3_flag = 1;
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <timerRun+0x108>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
	}
	if (timer4_cnt > 0) {
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <timerRun+0x10c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dd0b      	ble.n	8001a6c <timerRun+0xa4>
		timer4_cnt--;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <timerRun+0x10c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <timerRun+0x10c>)
 8001a5c:	6013      	str	r3, [r2, #0]
		if (timer4_cnt == 0)
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <timerRun+0x10c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <timerRun+0xa4>
			timer4_flag = 1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <timerRun+0x110>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
	}
	if (timer5_cnt > 0) {
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <timerRun+0x114>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dd0b      	ble.n	8001a8c <timerRun+0xc4>
		timer5_cnt--;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <timerRun+0x114>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <timerRun+0x114>)
 8001a7c:	6013      	str	r3, [r2, #0]
		if (timer5_cnt == 0)
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <timerRun+0x114>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <timerRun+0xc4>
			timer5_flag = 1;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <timerRun+0x118>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
	}
	if (timer6_cnt > 0) {
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <timerRun+0x11c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	dd0b      	ble.n	8001aac <timerRun+0xe4>
		timer6_cnt--;
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <timerRun+0x11c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <timerRun+0x11c>)
 8001a9c:	6013      	str	r3, [r2, #0]
		if (timer6_cnt == 0)
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <timerRun+0x11c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <timerRun+0xe4>
			timer6_flag = 1;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <timerRun+0x120>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
	}
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	200001d8 	.word	0x200001d8
 8001ab8:	200001f4 	.word	0x200001f4
 8001abc:	200001dc 	.word	0x200001dc
 8001ac0:	200001f8 	.word	0x200001f8
 8001ac4:	200001e0 	.word	0x200001e0
 8001ac8:	200001fc 	.word	0x200001fc
 8001acc:	200001e4 	.word	0x200001e4
 8001ad0:	20000200 	.word	0x20000200
 8001ad4:	200001e8 	.word	0x200001e8
 8001ad8:	20000204 	.word	0x20000204
 8001adc:	200001ec 	.word	0x200001ec
 8001ae0:	20000208 	.word	0x20000208
 8001ae4:	200001f0 	.word	0x200001f0
 8001ae8:	2000020c 	.word	0x2000020c

08001aec <isTimer1Expired>:
		return 1;
	} else
		return 0;
}

int isTimer1Expired() {
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	if (timer1_flag == 1) {
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <isTimer1Expired+0x20>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <isTimer1Expired+0x16>
		timer1_flag = 0;
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <isTimer1Expired+0x20>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
		return 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <isTimer1Expired+0x18>
	} else
		return 0;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	200001f8 	.word	0x200001f8

08001b10 <isTimer2Expired>:

int isTimer2Expired() {
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	if (timer2_flag == 1) {
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <isTimer2Expired+0x20>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d104      	bne.n	8001b26 <isTimer2Expired+0x16>
		timer2_flag = 0;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <isTimer2Expired+0x20>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
		return 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <isTimer2Expired+0x18>
	} else
		return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	200001fc 	.word	0x200001fc

08001b34 <isTimer3Expired>:

int isTimer3Expired() {
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	if (timer3_flag == 1) {
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <isTimer3Expired+0x20>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d104      	bne.n	8001b4a <isTimer3Expired+0x16>
		timer3_flag = 0;
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <isTimer3Expired+0x20>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
		return 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <isTimer3Expired+0x18>
	} else
		return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	20000200 	.word	0x20000200

08001b58 <isTimer5Expired>:
		return 1;
	} else
		return 0;
}

int isTimer5Expired() {
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	if (timer5_flag == 1) {
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <isTimer5Expired+0x20>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d104      	bne.n	8001b6e <isTimer5Expired+0x16>
		timer5_flag = 0;
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <isTimer5Expired+0x20>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
		return 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <isTimer5Expired+0x18>
	} else
		return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000208 	.word	0x20000208

08001b7c <isTimer6Expired>:

int isTimer6Expired() {
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	if (timer6_flag == 1) {
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <isTimer6Expired+0x20>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d104      	bne.n	8001b92 <isTimer6Expired+0x16>
		timer6_flag = 0;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <isTimer6Expired+0x20>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
		return 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <isTimer6Expired+0x18>
	} else
		return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	2000020c 	.word	0x2000020c

08001ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	; (8001be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc6:	f7ff fe65 	bl	8001894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f002 f869 	bl	8003ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bce:	f7ff fa6b 	bl	80010a8 <main>
  bx lr
 8001bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001bdc:	08004680 	.word	0x08004680
  ldr r2, =_sbss
 8001be0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001be4:	20000224 	.word	0x20000224

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x28>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x28>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f923 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	200f      	movs	r0, #15
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff fcf6 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f93b 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f903 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2000002c 	.word	0x2000002c
 8001c70:	20000034 	.word	0x20000034
 8001c74:	20000030 	.word	0x20000030

08001c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x1c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x20>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x20>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000034 	.word	0x20000034
 8001c98:	20000210 	.word	0x20000210

08001c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_GetTick+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000210 	.word	0x20000210

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <__NVIC_EnableIRQ+0x34>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff90 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff2d 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff42 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff35 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e169      	b.n	80021b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8158 	bne.w	80021ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a9a      	ldr	r2, [pc, #616]	; (800216c <HAL_GPIO_Init+0x2a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d05e      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f08:	4a98      	ldr	r2, [pc, #608]	; (800216c <HAL_GPIO_Init+0x2a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d875      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f0e:	4a98      	ldr	r2, [pc, #608]	; (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d058      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f14:	4a96      	ldr	r2, [pc, #600]	; (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d86f      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f1a:	4a96      	ldr	r2, [pc, #600]	; (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d052      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f20:	4a94      	ldr	r2, [pc, #592]	; (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d869      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f26:	4a94      	ldr	r2, [pc, #592]	; (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04c      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d863      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f32:	4a92      	ldr	r2, [pc, #584]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d046      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d85d      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d82a      	bhi.n	8001f98 <HAL_GPIO_Init+0xcc>
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d859      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_GPIO_Init+0x80>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fa1 	.word	0x08001fa1
 8001f54:	08001fb3 	.word	0x08001fb3
 8001f58:	08001ff5 	.word	0x08001ff5
 8001f5c:	08001ffb 	.word	0x08001ffb
 8001f60:	08001ffb 	.word	0x08001ffb
 8001f64:	08001ffb 	.word	0x08001ffb
 8001f68:	08001ffb 	.word	0x08001ffb
 8001f6c:	08001ffb 	.word	0x08001ffb
 8001f70:	08001ffb 	.word	0x08001ffb
 8001f74:	08001ffb 	.word	0x08001ffb
 8001f78:	08001ffb 	.word	0x08001ffb
 8001f7c:	08001ffb 	.word	0x08001ffb
 8001f80:	08001ffb 	.word	0x08001ffb
 8001f84:	08001ffb 	.word	0x08001ffb
 8001f88:	08001ffb 	.word	0x08001ffb
 8001f8c:	08001ffb 	.word	0x08001ffb
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	4a79      	ldr	r2, [pc, #484]	; (8002180 <HAL_GPIO_Init+0x2b4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9e:	e02c      	b.n	8001ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e029      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e024      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e01f      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e01a      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e013      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	611a      	str	r2, [r3, #16]
          break;
 8001fe6:	e009      	b.n	8001ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	615a      	str	r2, [r3, #20]
          break;
 8001ff2:	e003      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          break;
 8001ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d801      	bhi.n	8002006 <HAL_GPIO_Init+0x13a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e001      	b.n	800200a <HAL_GPIO_Init+0x13e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d802      	bhi.n	8002018 <HAL_GPIO_Init+0x14c>
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x152>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b08      	subs	r3, #8
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	210f      	movs	r1, #15
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80b1 	beq.w	80021ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204c:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_GPIO_Init+0x2b8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002064:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_GPIO_Init+0x2bc>)
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a40      	ldr	r2, [pc, #256]	; (800218c <HAL_GPIO_Init+0x2c0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_GPIO_Init+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00d      	beq.n	80020b4 <HAL_GPIO_Init+0x1e8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3e      	ldr	r2, [pc, #248]	; (8002194 <HAL_GPIO_Init+0x2c8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <HAL_GPIO_Init+0x1e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_GPIO_Init+0x1e0>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e004      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b8:	2300      	movs	r3, #0
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ca:	492f      	ldr	r1, [pc, #188]	; (8002188 <HAL_GPIO_Init+0x2bc>)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	492c      	ldr	r1, [pc, #176]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4928      	ldr	r1, [pc, #160]	; (800219c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	4922      	ldr	r1, [pc, #136]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	491e      	ldr	r1, [pc, #120]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4918      	ldr	r1, [pc, #96]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4914      	ldr	r1, [pc, #80]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d021      	beq.n	80021a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_GPIO_Init+0x2d0>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	e021      	b.n	80021ae <HAL_GPIO_Init+0x2e2>
 800216a:	bf00      	nop
 800216c:	10320000 	.word	0x10320000
 8002170:	10310000 	.word	0x10310000
 8002174:	10220000 	.word	0x10220000
 8002178:	10210000 	.word	0x10210000
 800217c:	10120000 	.word	0x10120000
 8002180:	10110000 	.word	0x10110000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_GPIO_Init+0x304>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4909      	ldr	r1, [pc, #36]	; (80021d0 <HAL_GPIO_Init+0x304>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f ae8e 	bne.w	8001ee0 <HAL_GPIO_Init+0x14>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	372c      	adds	r7, #44	; 0x2c
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002212:	787b      	ldrb	r3, [r7, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800221e:	e003      	b.n	8002228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
	...

08002234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e272      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8087 	beq.w	8002362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	4b92      	ldr	r3, [pc, #584]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b04      	cmp	r3, #4
 800225e:	d00c      	beq.n	800227a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
 800226c:	4b8c      	ldr	r3, [pc, #560]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002278:	d10b      	bne.n	8002292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d06c      	beq.n	8002360 <HAL_RCC_OscConfig+0x12c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d168      	bne.n	8002360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e24c      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x76>
 800229c:	4b80      	ldr	r3, [pc, #512]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a7f      	ldr	r2, [pc, #508]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e02e      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x98>
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7a      	ldr	r2, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xbc>
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xd4>
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6a      	ldr	r2, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b68      	ldr	r3, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a67      	ldr	r2, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fcc4 	bl	8001c9c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fcc0 	bl	8001c9c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e200      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xe4>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fcb0 	bl	8001c9c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff fcac 	bl	8001c9c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e1ec      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x10c>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d063      	beq.n	8002436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d116      	bne.n	80023c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e1c0      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023be:	e03a      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fc65 	bl	8001c9c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7ff fc61 	bl	8001c9c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e1a1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4927      	ldr	r1, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x270>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff fc44 	bl	8001c9c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002418:	f7ff fc40 	bl	8001c9c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e180      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03a      	beq.n	80024b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d019      	beq.n	800247e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002450:	f7ff fc24 	bl	8001c9c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002458:	f7ff fc20 	bl	8001c9c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e160      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 fad8 	bl	8002a2c <RCC_Delay>
 800247c:	e01c      	b.n	80024b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x274>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7ff fc0a 	bl	8001c9c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff fc06 	bl	8001c9c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e146      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	42420000 	.word	0x42420000
 80024a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a6 	beq.w	8002612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b8b      	ldr	r3, [pc, #556]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a87      	ldr	r2, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff fbc7 	bl	8001c9c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7ff fbc3 	bl	8001c9c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e103      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b75      	ldr	r3, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x4c8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x312>
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e02d      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x334>
 800254e:	4b6a      	ldr	r3, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b67      	ldr	r3, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	e01c      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x356>
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4a60      	ldr	r2, [pc, #384]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6213      	str	r3, [r2, #32]
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6213      	str	r3, [r2, #32]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x36e>
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6213      	str	r3, [r2, #32]
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fb77 	bl	8001c9c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7ff fb73 	bl	8001c9c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e0b1      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x37e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff fb61 	bl	8001c9c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7ff fb5d 	bl	8001c9c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e09b      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d105      	bne.n	8002612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a3b      	ldr	r2, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800261c:	4b36      	ldr	r3, [pc, #216]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d061      	beq.n	80026ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d146      	bne.n	80026be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fb31 	bl	8001c9c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fb2d 	bl	8001c9c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e06d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4921      	ldr	r1, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a19      	ldr	r1, [r3, #32]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	430b      	orrs	r3, r1
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7ff fb01 	bl	8001c9c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7ff fafd 	bl	8001c9c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e03d      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x46a>
 80026bc:	e035      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff faea 	bl	8001c9c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff fae6 	bl	8001c9c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e026      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x498>
 80026ea:	e01e      	b.n	800272a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e019      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40007000 	.word	0x40007000
 8002700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x500>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d0      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4965      	ldr	r1, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e073      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7ff fa38 	bl	8001c9c <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7ff fa34 	bl	8001c9c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e053      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d210      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f996 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	0800462c 	.word	0x0800462c
 8002904:	2000002c 	.word	0x2000002c
 8002908:	20000030 	.word	0x20000030

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b490      	push	{r4, r7}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002914:	1d3c      	adds	r4, r7, #4
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800291c:	f240 2301 	movw	r3, #513	; 0x201
 8002920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x40>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x46>
 800294a:	e02b      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800294e:	623b      	str	r3, [r7, #32]
      break;
 8002950:	e02b      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3328      	adds	r3, #40	; 0x28
 800295c:	443b      	add	r3, r7
 800295e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002962:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	3328      	adds	r3, #40	; 0x28
 800297a:	443b      	add	r3, r7
 800297c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002986:	fb03 f202 	mul.w	r2, r3, r2
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
 8002992:	e004      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	623b      	str	r3, [r7, #32]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a6:	623b      	str	r3, [r7, #32]
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3728      	adds	r7, #40	; 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc90      	pop	{r4, r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	0800461c 	.word	0x0800461c
 80029bc:	40021000 	.word	0x40021000
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b02      	ldr	r3, [pc, #8]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	2000002c 	.word	0x2000002c

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	0800463c 	.word	0x0800463c

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800463c 	.word	0x0800463c

08002a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCC_Delay+0x34>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <RCC_Delay+0x38>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0a5b      	lsrs	r3, r3, #9
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a48:	bf00      	nop
  }
  while (Delay --);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	60fa      	str	r2, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <RCC_Delay+0x1c>
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	2000002c 	.word	0x2000002c
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e041      	b.n	8002afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fde4 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f000 fc28 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e03a      	b.n	8002b96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_Base_Start_IT+0x58>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d111      	bne.n	8002b84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d010      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b82:	e007      	b.n	8002b94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e041      	b.n	8002c42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f839 	bl	8002c4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f000 fb86 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_TIM_PWM_Start+0x24>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	e022      	b.n	8002cc6 <HAL_TIM_PWM_Start+0x6a>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d109      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x3e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e015      	b.n	8002cc6 <HAL_TIM_PWM_Start+0x6a>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d109      	bne.n	8002cb4 <HAL_TIM_PWM_Start+0x58>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e008      	b.n	8002cc6 <HAL_TIM_PWM_Start+0x6a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e05e      	b.n	8002d8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_PWM_Start+0x82>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cdc:	e013      	b.n	8002d06 <HAL_TIM_PWM_Start+0xaa>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0x92>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cec:	e00b      	b.n	8002d06 <HAL_TIM_PWM_Start+0xaa>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d104      	bne.n	8002cfe <HAL_TIM_PWM_Start+0xa2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	e003      	b.n	8002d06 <HAL_TIM_PWM_Start+0xaa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd74 	bl	80037fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_TIM_PWM_Start+0x138>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_TIM_PWM_Start+0x138>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_TIM_PWM_Start+0xfa>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d009      	beq.n	8002d56 <HAL_TIM_PWM_Start+0xfa>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_TIM_PWM_Start+0x13c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIM_PWM_Start+0xfa>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <HAL_TIM_PWM_Start+0x140>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d111      	bne.n	8002d7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d010      	beq.n	8002d8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	e007      	b.n	8002d8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800

08002da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0202 	mvn.w	r2, #2
 8002dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fa6f 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa62 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fa71 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d122      	bne.n	8002e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11b      	bne.n	8002e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0204 	mvn.w	r2, #4
 8002e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fa45 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa38 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fa47 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d122      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0208 	mvn.w	r2, #8
 8002e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2204      	movs	r2, #4
 8002e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa1b 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002e90:	e005      	b.n	8002e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa0e 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fa1d 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d122      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0210 	mvn.w	r2, #16
 8002ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9f1 	bl	80032c6 <HAL_TIM_IC_CaptureCallback>
 8002ee4:	e005      	b.n	8002ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9e4 	bl	80032b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f9f3 	bl	80032d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0201 	mvn.w	r2, #1
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fa84 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b80      	cmp	r3, #128	; 0x80
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fce1 	bl	8003912 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9b7 	bl	80032ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0220 	mvn.w	r2, #32
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fcac 	bl	8003900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0ac      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	f200 809f 	bhi.w	8003118 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003015 	.word	0x08003015
 8002fe4:	08003119 	.word	0x08003119
 8002fe8:	08003119 	.word	0x08003119
 8002fec:	08003119 	.word	0x08003119
 8002ff0:	08003055 	.word	0x08003055
 8002ff4:	08003119 	.word	0x08003119
 8002ff8:	08003119 	.word	0x08003119
 8002ffc:	08003119 	.word	0x08003119
 8003000:	08003097 	.word	0x08003097
 8003004:	08003119 	.word	0x08003119
 8003008:	08003119 	.word	0x08003119
 800300c:	08003119 	.word	0x08003119
 8003010:	080030d7 	.word	0x080030d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f9d0 	bl	80033c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0204 	bic.w	r2, r2, #4
 800303e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6999      	ldr	r1, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	619a      	str	r2, [r3, #24]
      break;
 8003052:	e062      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fa16 	bl	800348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6999      	ldr	r1, [r3, #24]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	021a      	lsls	r2, r3, #8
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
      break;
 8003094:	e041      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fa5f 	bl	8003560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0208 	orr.w	r2, r2, #8
 80030b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69da      	ldr	r2, [r3, #28]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0204 	bic.w	r2, r2, #4
 80030c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69d9      	ldr	r1, [r3, #28]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
      break;
 80030d4:	e021      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 faa9 	bl	8003634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69d9      	ldr	r1, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	021a      	lsls	r2, r3, #8
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	61da      	str	r2, [r3, #28]
      break;
 8003116:	e000      	b.n	800311a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003118:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x18>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b3      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x180>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d03e      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xd0>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	f200 8087 	bhi.w	8003294 <HAL_TIM_ConfigClockSource+0x168>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	f000 8085 	beq.w	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d87f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d01a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xa2>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d87b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d050      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x116>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d877      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d03c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xf6>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d873      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d058      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x136>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d86f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d867      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d05a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031cc:	e062      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 faee 	bl	80037be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e04e      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f000 fad7 	bl	80037be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	461a      	mov	r2, r3
 8003230:	f000 fa4e 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	; 0x50
 800323a:	4618      	mov	r0, r3
 800323c:	f000 faa5 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003240:	e02b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f000 fa6c 	bl	800372c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	; 0x60
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fa95 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003260:	e01b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	f000 fa2e 	bl	80036d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fa85 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 8003280:	e00b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f000 fa7c 	bl	800378a <TIM_ITRx_SetConfig>
        break;
 8003292:	e002      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00b      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d007      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d003      	beq.n	800332c <TIM_Base_SetConfig+0x30>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a25      	ldr	r2, [pc, #148]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d108      	bne.n	800333e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <TIM_Base_SetConfig+0xbc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a18      	ldr	r2, [pc, #96]	; (80033bc <TIM_Base_SetConfig+0xc0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a07      	ldr	r2, [pc, #28]	; (80033b4 <TIM_Base_SetConfig+0xb8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	615a      	str	r2, [r3, #20]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800

080033c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f023 0210 	bic.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1d      	ldr	r2, [pc, #116]	; (800355c <TIM_OC2_SetConfig+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10d      	bne.n	8003508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <TIM_OC2_SetConfig+0xd0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d113      	bne.n	8003538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00

08003560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <TIM_OC3_SetConfig+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10d      	bne.n	80035da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <TIM_OC3_SetConfig+0xd0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d113      	bne.n	800360a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40012c00 	.word	0x40012c00

08003634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	031b      	lsls	r3, r3, #12
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <TIM_OC4_SetConfig+0x98>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d109      	bne.n	80036a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00

080036d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f023 0201 	bic.w	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 030a 	bic.w	r3, r3, #10
 800370c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	621a      	str	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 0210 	bic.w	r2, r3, #16
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003756:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	031b      	lsls	r3, r3, #12
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003768:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	621a      	str	r2, [r3, #32]
}
 8003780:	bf00      	nop
 8003782:	371c      	adds	r7, #28
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f043 0307 	orr.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037be:	b480      	push	{r7}
 80037c0:	b087      	sub	sp, #28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	609a      	str	r2, [r3, #8]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2201      	movs	r2, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	fa01 f303 	lsl.w	r3, r1, r3
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	621a      	str	r2, [r3, #32]
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e046      	b.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d009      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a10      	ldr	r2, [pc, #64]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d10c      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800

08003900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e03f      	b.n	80039b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fef0 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f905 	bl	8003b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d17c      	bne.n	8003ad8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_UART_Transmit+0x2c>
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e075      	b.n	8003ada <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Transmit+0x3e>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e06e      	b.n	8003ada <HAL_UART_Transmit+0x11c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fe f943 	bl	8001c9c <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d108      	bne.n	8003a40 <HAL_UART_Transmit+0x82>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e003      	b.n	8003a48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a50:	e02a      	b.n	8003aa8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f840 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e036      	b.n	8003ada <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e007      	b.n	8003a9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1cf      	bne.n	8003a52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f810 	bl	8003ae2 <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e006      	b.n	8003ada <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af2:	e02c      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d028      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b02:	f7fe f8cb 	bl	8001c9c <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d21d      	bcs.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e00f      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d0c3      	beq.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bb2:	f023 030c 	bic.w	r3, r3, #12
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <UART_SetConfig+0x114>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d103      	bne.n	8003be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe ff10 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	e002      	b.n	8003bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe fef8 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <UART_SetConfig+0x118>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	0119      	lsls	r1, r3, #4
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009a      	lsls	r2, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <UART_SetConfig+0x118>)
 8003c26:	fba3 0302 	umull	r0, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2064      	movs	r0, #100	; 0x64
 8003c2e:	fb00 f303 	mul.w	r3, r0, r3
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	3332      	adds	r3, #50	; 0x32
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <UART_SetConfig+0x118>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	4419      	add	r1, r3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <UART_SetConfig+0x118>)
 8003c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2064      	movs	r0, #100	; 0x64
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	3332      	adds	r3, #50	; 0x32
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <UART_SetConfig+0x118>)
 8003c72:	fba2 2303 	umull	r2, r3, r2, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	440a      	add	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	51eb851f 	.word	0x51eb851f

08003c94 <__errno>:
 8003c94:	4b01      	ldr	r3, [pc, #4]	; (8003c9c <__errno+0x8>)
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000038 	.word	0x20000038

08003ca0 <__libc_init_array>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	4d0c      	ldr	r5, [pc, #48]	; (8003cd8 <__libc_init_array+0x38>)
 8003ca6:	4c0d      	ldr	r4, [pc, #52]	; (8003cdc <__libc_init_array+0x3c>)
 8003ca8:	1b64      	subs	r4, r4, r5
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	42a6      	cmp	r6, r4
 8003cae:	d109      	bne.n	8003cc4 <__libc_init_array+0x24>
 8003cb0:	f000 fc9c 	bl	80045ec <_init>
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	4d0a      	ldr	r5, [pc, #40]	; (8003ce0 <__libc_init_array+0x40>)
 8003cb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ce4 <__libc_init_array+0x44>)
 8003cba:	1b64      	subs	r4, r4, r5
 8003cbc:	10a4      	asrs	r4, r4, #2
 8003cbe:	42a6      	cmp	r6, r4
 8003cc0:	d105      	bne.n	8003cce <__libc_init_array+0x2e>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc8:	4798      	blx	r3
 8003cca:	3601      	adds	r6, #1
 8003ccc:	e7ee      	b.n	8003cac <__libc_init_array+0xc>
 8003cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cd2:	4798      	blx	r3
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	e7f2      	b.n	8003cbe <__libc_init_array+0x1e>
 8003cd8:	08004678 	.word	0x08004678
 8003cdc:	08004678 	.word	0x08004678
 8003ce0:	08004678 	.word	0x08004678
 8003ce4:	0800467c 	.word	0x0800467c

08003ce8 <memset>:
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4402      	add	r2, r0
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <memset+0xa>
 8003cf0:	4770      	bx	lr
 8003cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf6:	e7f9      	b.n	8003cec <memset+0x4>

08003cf8 <siprintf>:
 8003cf8:	b40e      	push	{r1, r2, r3}
 8003cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cfe:	b500      	push	{lr}
 8003d00:	b09c      	sub	sp, #112	; 0x70
 8003d02:	ab1d      	add	r3, sp, #116	; 0x74
 8003d04:	9002      	str	r0, [sp, #8]
 8003d06:	9006      	str	r0, [sp, #24]
 8003d08:	9107      	str	r1, [sp, #28]
 8003d0a:	9104      	str	r1, [sp, #16]
 8003d0c:	4808      	ldr	r0, [pc, #32]	; (8003d30 <siprintf+0x38>)
 8003d0e:	4909      	ldr	r1, [pc, #36]	; (8003d34 <siprintf+0x3c>)
 8003d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d14:	9105      	str	r1, [sp, #20]
 8003d16:	6800      	ldr	r0, [r0, #0]
 8003d18:	a902      	add	r1, sp, #8
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f000 f868 	bl	8003df0 <_svfiprintf_r>
 8003d20:	2200      	movs	r2, #0
 8003d22:	9b02      	ldr	r3, [sp, #8]
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	b01c      	add	sp, #112	; 0x70
 8003d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d2c:	b003      	add	sp, #12
 8003d2e:	4770      	bx	lr
 8003d30:	20000038 	.word	0x20000038
 8003d34:	ffff0208 	.word	0xffff0208

08003d38 <__ssputs_r>:
 8003d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d3c:	688e      	ldr	r6, [r1, #8]
 8003d3e:	4682      	mov	sl, r0
 8003d40:	429e      	cmp	r6, r3
 8003d42:	460c      	mov	r4, r1
 8003d44:	4690      	mov	r8, r2
 8003d46:	461f      	mov	r7, r3
 8003d48:	d838      	bhi.n	8003dbc <__ssputs_r+0x84>
 8003d4a:	898a      	ldrh	r2, [r1, #12]
 8003d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d50:	d032      	beq.n	8003db8 <__ssputs_r+0x80>
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	6909      	ldr	r1, [r1, #16]
 8003d56:	3301      	adds	r3, #1
 8003d58:	eba5 0901 	sub.w	r9, r5, r1
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	444b      	add	r3, r9
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d68:	106d      	asrs	r5, r5, #1
 8003d6a:	429d      	cmp	r5, r3
 8003d6c:	bf38      	it	cc
 8003d6e:	461d      	movcc	r5, r3
 8003d70:	0553      	lsls	r3, r2, #21
 8003d72:	d531      	bpl.n	8003dd8 <__ssputs_r+0xa0>
 8003d74:	4629      	mov	r1, r5
 8003d76:	f000 fb6f 	bl	8004458 <_malloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	b950      	cbnz	r0, 8003d94 <__ssputs_r+0x5c>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f8ca 3000 	str.w	r3, [sl]
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d94:	464a      	mov	r2, r9
 8003d96:	6921      	ldr	r1, [r4, #16]
 8003d98:	f000 face 	bl	8004338 <memcpy>
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	81a3      	strh	r3, [r4, #12]
 8003da8:	6126      	str	r6, [r4, #16]
 8003daa:	444e      	add	r6, r9
 8003dac:	6026      	str	r6, [r4, #0]
 8003dae:	463e      	mov	r6, r7
 8003db0:	6165      	str	r5, [r4, #20]
 8003db2:	eba5 0509 	sub.w	r5, r5, r9
 8003db6:	60a5      	str	r5, [r4, #8]
 8003db8:	42be      	cmp	r6, r7
 8003dba:	d900      	bls.n	8003dbe <__ssputs_r+0x86>
 8003dbc:	463e      	mov	r6, r7
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	f000 fac6 	bl	8004354 <memmove>
 8003dc8:	68a3      	ldr	r3, [r4, #8]
 8003dca:	2000      	movs	r0, #0
 8003dcc:	1b9b      	subs	r3, r3, r6
 8003dce:	60a3      	str	r3, [r4, #8]
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	4433      	add	r3, r6
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	e7db      	b.n	8003d90 <__ssputs_r+0x58>
 8003dd8:	462a      	mov	r2, r5
 8003dda:	f000 fbb1 	bl	8004540 <_realloc_r>
 8003dde:	4606      	mov	r6, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1e1      	bne.n	8003da8 <__ssputs_r+0x70>
 8003de4:	4650      	mov	r0, sl
 8003de6:	6921      	ldr	r1, [r4, #16]
 8003de8:	f000 face 	bl	8004388 <_free_r>
 8003dec:	e7c7      	b.n	8003d7e <__ssputs_r+0x46>
	...

08003df0 <_svfiprintf_r>:
 8003df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df4:	4698      	mov	r8, r3
 8003df6:	898b      	ldrh	r3, [r1, #12]
 8003df8:	4607      	mov	r7, r0
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	460d      	mov	r5, r1
 8003dfe:	4614      	mov	r4, r2
 8003e00:	b09d      	sub	sp, #116	; 0x74
 8003e02:	d50e      	bpl.n	8003e22 <_svfiprintf_r+0x32>
 8003e04:	690b      	ldr	r3, [r1, #16]
 8003e06:	b963      	cbnz	r3, 8003e22 <_svfiprintf_r+0x32>
 8003e08:	2140      	movs	r1, #64	; 0x40
 8003e0a:	f000 fb25 	bl	8004458 <_malloc_r>
 8003e0e:	6028      	str	r0, [r5, #0]
 8003e10:	6128      	str	r0, [r5, #16]
 8003e12:	b920      	cbnz	r0, 8003e1e <_svfiprintf_r+0x2e>
 8003e14:	230c      	movs	r3, #12
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e0d1      	b.n	8003fc2 <_svfiprintf_r+0x1d2>
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	616b      	str	r3, [r5, #20]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
 8003e26:	2320      	movs	r3, #32
 8003e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e2c:	2330      	movs	r3, #48	; 0x30
 8003e2e:	f04f 0901 	mov.w	r9, #1
 8003e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1ec>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	4623      	mov	r3, r4
 8003e40:	469a      	mov	sl, r3
 8003e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e46:	b10a      	cbz	r2, 8003e4c <_svfiprintf_r+0x5c>
 8003e48:	2a25      	cmp	r2, #37	; 0x25
 8003e4a:	d1f9      	bne.n	8003e40 <_svfiprintf_r+0x50>
 8003e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e50:	d00b      	beq.n	8003e6a <_svfiprintf_r+0x7a>
 8003e52:	465b      	mov	r3, fp
 8003e54:	4622      	mov	r2, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff6d 	bl	8003d38 <__ssputs_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f000 80aa 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e66:	445a      	add	r2, fp
 8003e68:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80a2 	beq.w	8003fb8 <_svfiprintf_r+0x1c8>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7e:	f10a 0a01 	add.w	sl, sl, #1
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e8c:	4654      	mov	r4, sl
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e94:	4851      	ldr	r0, [pc, #324]	; (8003fdc <_svfiprintf_r+0x1ec>)
 8003e96:	f000 fa41 	bl	800431c <memchr>
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	b9d8      	cbnz	r0, 8003ed6 <_svfiprintf_r+0xe6>
 8003e9e:	06d0      	lsls	r0, r2, #27
 8003ea0:	bf44      	itt	mi
 8003ea2:	2320      	movmi	r3, #32
 8003ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea8:	0711      	lsls	r1, r2, #28
 8003eaa:	bf44      	itt	mi
 8003eac:	232b      	movmi	r3, #43	; 0x2b
 8003eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb8:	d015      	beq.n	8003ee6 <_svfiprintf_r+0xf6>
 8003eba:	4654      	mov	r4, sl
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f04f 0c0a 	mov.w	ip, #10
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eca:	3b30      	subs	r3, #48	; 0x30
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d94e      	bls.n	8003f6e <_svfiprintf_r+0x17e>
 8003ed0:	b1b0      	cbz	r0, 8003f00 <_svfiprintf_r+0x110>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e014      	b.n	8003f00 <_svfiprintf_r+0x110>
 8003ed6:	eba0 0308 	sub.w	r3, r0, r8
 8003eda:	fa09 f303 	lsl.w	r3, r9, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	e7d2      	b.n	8003e8c <_svfiprintf_r+0x9c>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	1d19      	adds	r1, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9103      	str	r1, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfbb      	ittet	lt
 8003ef2:	425b      	neglt	r3, r3
 8003ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef8:	9307      	strge	r3, [sp, #28]
 8003efa:	9307      	strlt	r3, [sp, #28]
 8003efc:	bfb8      	it	lt
 8003efe:	9204      	strlt	r2, [sp, #16]
 8003f00:	7823      	ldrb	r3, [r4, #0]
 8003f02:	2b2e      	cmp	r3, #46	; 0x2e
 8003f04:	d10c      	bne.n	8003f20 <_svfiprintf_r+0x130>
 8003f06:	7863      	ldrb	r3, [r4, #1]
 8003f08:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0a:	d135      	bne.n	8003f78 <_svfiprintf_r+0x188>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	3402      	adds	r4, #2
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	9203      	str	r2, [sp, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfb8      	it	lt
 8003f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f1e:	9305      	str	r3, [sp, #20]
 8003f20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003fe0 <_svfiprintf_r+0x1f0>
 8003f24:	2203      	movs	r2, #3
 8003f26:	4650      	mov	r0, sl
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	f000 f9f7 	bl	800431c <memchr>
 8003f2e:	b140      	cbz	r0, 8003f42 <_svfiprintf_r+0x152>
 8003f30:	2340      	movs	r3, #64	; 0x40
 8003f32:	eba0 000a 	sub.w	r0, r0, sl
 8003f36:	fa03 f000 	lsl.w	r0, r3, r0
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	3401      	adds	r4, #1
 8003f3e:	4303      	orrs	r3, r0
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f46:	2206      	movs	r2, #6
 8003f48:	4826      	ldr	r0, [pc, #152]	; (8003fe4 <_svfiprintf_r+0x1f4>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	f000 f9e5 	bl	800431c <memchr>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d038      	beq.n	8003fc8 <_svfiprintf_r+0x1d8>
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <_svfiprintf_r+0x1f8>)
 8003f58:	bb1b      	cbnz	r3, 8003fa2 <_svfiprintf_r+0x1b2>
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	3307      	adds	r3, #7
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	3308      	adds	r3, #8
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	4433      	add	r3, r6
 8003f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6c:	e767      	b.n	8003e3e <_svfiprintf_r+0x4e>
 8003f6e:	460c      	mov	r4, r1
 8003f70:	2001      	movs	r0, #1
 8003f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f76:	e7a5      	b.n	8003ec4 <_svfiprintf_r+0xd4>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f04f 0c0a 	mov.w	ip, #10
 8003f7e:	4619      	mov	r1, r3
 8003f80:	3401      	adds	r4, #1
 8003f82:	9305      	str	r3, [sp, #20]
 8003f84:	4620      	mov	r0, r4
 8003f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8a:	3a30      	subs	r2, #48	; 0x30
 8003f8c:	2a09      	cmp	r2, #9
 8003f8e:	d903      	bls.n	8003f98 <_svfiprintf_r+0x1a8>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0c5      	beq.n	8003f20 <_svfiprintf_r+0x130>
 8003f94:	9105      	str	r1, [sp, #20]
 8003f96:	e7c3      	b.n	8003f20 <_svfiprintf_r+0x130>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fa0:	e7f0      	b.n	8003f84 <_svfiprintf_r+0x194>
 8003fa2:	ab03      	add	r3, sp, #12
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	462a      	mov	r2, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <_svfiprintf_r+0x1fc>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	f3af 8000 	nop.w
 8003fb2:	1c42      	adds	r2, r0, #1
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	d1d6      	bne.n	8003f66 <_svfiprintf_r+0x176>
 8003fb8:	89ab      	ldrh	r3, [r5, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af2c 	bmi.w	8003e18 <_svfiprintf_r+0x28>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	b01d      	add	sp, #116	; 0x74
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	462a      	mov	r2, r5
 8003fce:	4638      	mov	r0, r7
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <_svfiprintf_r+0x1fc>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	f000 f87c 	bl	80040d0 <_printf_i>
 8003fd8:	e7eb      	b.n	8003fb2 <_svfiprintf_r+0x1c2>
 8003fda:	bf00      	nop
 8003fdc:	08004644 	.word	0x08004644
 8003fe0:	0800464a 	.word	0x0800464a
 8003fe4:	0800464e 	.word	0x0800464e
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	08003d39 	.word	0x08003d39

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bfb8      	it	lt
 8004002:	4613      	movlt	r3, r2
 8004004:	6033      	str	r3, [r6, #0]
 8004006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400a:	460c      	mov	r4, r1
 800400c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc28      	bgt.n	800408a <_printf_common+0x9a>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42d      	bmi.n	80040a4 <_printf_common+0xb4>
 8004048:	4649      	mov	r1, r9
 800404a:	4638      	mov	r0, r7
 800404c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d020      	beq.n	8004098 <_printf_common+0xa8>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	68e5      	ldr	r5, [r4, #12]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf18      	it	ne
 8004062:	2500      	movne	r5, #0
 8004064:	6832      	ldr	r2, [r6, #0]
 8004066:	f04f 0600 	mov.w	r6, #0
 800406a:	68a3      	ldr	r3, [r4, #8]
 800406c:	bf08      	it	eq
 800406e:	1aad      	subeq	r5, r5, r2
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	bf08      	it	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	4293      	cmp	r3, r2
 800407a:	bfc4      	itt	gt
 800407c:	1a9b      	subgt	r3, r3, r2
 800407e:	18ed      	addgt	r5, r5, r3
 8004080:	341a      	adds	r4, #26
 8004082:	42b5      	cmp	r5, r6
 8004084:	d11a      	bne.n	80040bc <_printf_common+0xcc>
 8004086:	2000      	movs	r0, #0
 8004088:	e008      	b.n	800409c <_printf_common+0xac>
 800408a:	2301      	movs	r3, #1
 800408c:	4652      	mov	r2, sl
 800408e:	4649      	mov	r1, r9
 8004090:	4638      	mov	r0, r7
 8004092:	47c0      	blx	r8
 8004094:	3001      	adds	r0, #1
 8004096:	d103      	bne.n	80040a0 <_printf_common+0xb0>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	3501      	adds	r5, #1
 80040a2:	e7c4      	b.n	800402e <_printf_common+0x3e>
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	18e1      	adds	r1, r4, r3
 80040a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b2:	4422      	add	r2, r4
 80040b4:	3302      	adds	r3, #2
 80040b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ba:	e7c5      	b.n	8004048 <_printf_common+0x58>
 80040bc:	2301      	movs	r3, #1
 80040be:	4622      	mov	r2, r4
 80040c0:	4649      	mov	r1, r9
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d0e6      	beq.n	8004098 <_printf_common+0xa8>
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7d9      	b.n	8004082 <_printf_common+0x92>
	...

080040d0 <_printf_i>:
 80040d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	7e0f      	ldrb	r7, [r1, #24]
 80040d6:	4691      	mov	r9, r2
 80040d8:	2f78      	cmp	r7, #120	; 0x78
 80040da:	4680      	mov	r8, r0
 80040dc:	460c      	mov	r4, r1
 80040de:	469a      	mov	sl, r3
 80040e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e6:	d807      	bhi.n	80040f8 <_printf_i+0x28>
 80040e8:	2f62      	cmp	r7, #98	; 0x62
 80040ea:	d80a      	bhi.n	8004102 <_printf_i+0x32>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	f000 80d9 	beq.w	80042a4 <_printf_i+0x1d4>
 80040f2:	2f58      	cmp	r7, #88	; 0x58
 80040f4:	f000 80a4 	beq.w	8004240 <_printf_i+0x170>
 80040f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004100:	e03a      	b.n	8004178 <_printf_i+0xa8>
 8004102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004106:	2b15      	cmp	r3, #21
 8004108:	d8f6      	bhi.n	80040f8 <_printf_i+0x28>
 800410a:	a101      	add	r1, pc, #4	; (adr r1, 8004110 <_printf_i+0x40>)
 800410c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004110:	08004169 	.word	0x08004169
 8004114:	0800417d 	.word	0x0800417d
 8004118:	080040f9 	.word	0x080040f9
 800411c:	080040f9 	.word	0x080040f9
 8004120:	080040f9 	.word	0x080040f9
 8004124:	080040f9 	.word	0x080040f9
 8004128:	0800417d 	.word	0x0800417d
 800412c:	080040f9 	.word	0x080040f9
 8004130:	080040f9 	.word	0x080040f9
 8004134:	080040f9 	.word	0x080040f9
 8004138:	080040f9 	.word	0x080040f9
 800413c:	0800428b 	.word	0x0800428b
 8004140:	080041ad 	.word	0x080041ad
 8004144:	0800426d 	.word	0x0800426d
 8004148:	080040f9 	.word	0x080040f9
 800414c:	080040f9 	.word	0x080040f9
 8004150:	080042ad 	.word	0x080042ad
 8004154:	080040f9 	.word	0x080040f9
 8004158:	080041ad 	.word	0x080041ad
 800415c:	080040f9 	.word	0x080040f9
 8004160:	080040f9 	.word	0x080040f9
 8004164:	08004275 	.word	0x08004275
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	602a      	str	r2, [r5, #0]
 8004170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004178:	2301      	movs	r3, #1
 800417a:	e0a4      	b.n	80042c6 <_printf_i+0x1f6>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	6829      	ldr	r1, [r5, #0]
 8004180:	0606      	lsls	r6, r0, #24
 8004182:	f101 0304 	add.w	r3, r1, #4
 8004186:	d50a      	bpl.n	800419e <_printf_i+0xce>
 8004188:	680e      	ldr	r6, [r1, #0]
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	2e00      	cmp	r6, #0
 800418e:	da03      	bge.n	8004198 <_printf_i+0xc8>
 8004190:	232d      	movs	r3, #45	; 0x2d
 8004192:	4276      	negs	r6, r6
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004198:	230a      	movs	r3, #10
 800419a:	485e      	ldr	r0, [pc, #376]	; (8004314 <_printf_i+0x244>)
 800419c:	e019      	b.n	80041d2 <_printf_i+0x102>
 800419e:	680e      	ldr	r6, [r1, #0]
 80041a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	bf18      	it	ne
 80041a8:	b236      	sxthne	r6, r6
 80041aa:	e7ef      	b.n	800418c <_printf_i+0xbc>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	6820      	ldr	r0, [r4, #0]
 80041b0:	1d19      	adds	r1, r3, #4
 80041b2:	6029      	str	r1, [r5, #0]
 80041b4:	0601      	lsls	r1, r0, #24
 80041b6:	d501      	bpl.n	80041bc <_printf_i+0xec>
 80041b8:	681e      	ldr	r6, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <_printf_i+0xf2>
 80041bc:	0646      	lsls	r6, r0, #25
 80041be:	d5fb      	bpl.n	80041b8 <_printf_i+0xe8>
 80041c0:	881e      	ldrh	r6, [r3, #0]
 80041c2:	2f6f      	cmp	r7, #111	; 0x6f
 80041c4:	bf0c      	ite	eq
 80041c6:	2308      	moveq	r3, #8
 80041c8:	230a      	movne	r3, #10
 80041ca:	4852      	ldr	r0, [pc, #328]	; (8004314 <_printf_i+0x244>)
 80041cc:	2100      	movs	r1, #0
 80041ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041d2:	6865      	ldr	r5, [r4, #4]
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	bfa8      	it	ge
 80041d8:	6821      	ldrge	r1, [r4, #0]
 80041da:	60a5      	str	r5, [r4, #8]
 80041dc:	bfa4      	itt	ge
 80041de:	f021 0104 	bicge.w	r1, r1, #4
 80041e2:	6021      	strge	r1, [r4, #0]
 80041e4:	b90e      	cbnz	r6, 80041ea <_printf_i+0x11a>
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	d04d      	beq.n	8004286 <_printf_i+0x1b6>
 80041ea:	4615      	mov	r5, r2
 80041ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80041f0:	fb03 6711 	mls	r7, r3, r1, r6
 80041f4:	5dc7      	ldrb	r7, [r0, r7]
 80041f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041fa:	4637      	mov	r7, r6
 80041fc:	42bb      	cmp	r3, r7
 80041fe:	460e      	mov	r6, r1
 8004200:	d9f4      	bls.n	80041ec <_printf_i+0x11c>
 8004202:	2b08      	cmp	r3, #8
 8004204:	d10b      	bne.n	800421e <_printf_i+0x14e>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	07de      	lsls	r6, r3, #31
 800420a:	d508      	bpl.n	800421e <_printf_i+0x14e>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	6861      	ldr	r1, [r4, #4]
 8004210:	4299      	cmp	r1, r3
 8004212:	bfde      	ittt	le
 8004214:	2330      	movle	r3, #48	; 0x30
 8004216:	f805 3c01 	strble.w	r3, [r5, #-1]
 800421a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800421e:	1b52      	subs	r2, r2, r5
 8004220:	6122      	str	r2, [r4, #16]
 8004222:	464b      	mov	r3, r9
 8004224:	4621      	mov	r1, r4
 8004226:	4640      	mov	r0, r8
 8004228:	f8cd a000 	str.w	sl, [sp]
 800422c:	aa03      	add	r2, sp, #12
 800422e:	f7ff fedf 	bl	8003ff0 <_printf_common>
 8004232:	3001      	adds	r0, #1
 8004234:	d14c      	bne.n	80042d0 <_printf_i+0x200>
 8004236:	f04f 30ff 	mov.w	r0, #4294967295
 800423a:	b004      	add	sp, #16
 800423c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004240:	4834      	ldr	r0, [pc, #208]	; (8004314 <_printf_i+0x244>)
 8004242:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004246:	6829      	ldr	r1, [r5, #0]
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	f851 6b04 	ldr.w	r6, [r1], #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	061d      	lsls	r5, r3, #24
 8004252:	d514      	bpl.n	800427e <_printf_i+0x1ae>
 8004254:	07df      	lsls	r7, r3, #31
 8004256:	bf44      	itt	mi
 8004258:	f043 0320 	orrmi.w	r3, r3, #32
 800425c:	6023      	strmi	r3, [r4, #0]
 800425e:	b91e      	cbnz	r6, 8004268 <_printf_i+0x198>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	2310      	movs	r3, #16
 800426a:	e7af      	b.n	80041cc <_printf_i+0xfc>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f043 0320 	orr.w	r3, r3, #32
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	2378      	movs	r3, #120	; 0x78
 8004276:	4828      	ldr	r0, [pc, #160]	; (8004318 <_printf_i+0x248>)
 8004278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427c:	e7e3      	b.n	8004246 <_printf_i+0x176>
 800427e:	0659      	lsls	r1, r3, #25
 8004280:	bf48      	it	mi
 8004282:	b2b6      	uxthmi	r6, r6
 8004284:	e7e6      	b.n	8004254 <_printf_i+0x184>
 8004286:	4615      	mov	r5, r2
 8004288:	e7bb      	b.n	8004202 <_printf_i+0x132>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	6826      	ldr	r6, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	6028      	str	r0, [r5, #0]
 8004294:	0635      	lsls	r5, r6, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1ce>
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1d4>
 800429e:	0670      	lsls	r0, r6, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1ca>
 80042a2:	8019      	strh	r1, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4615      	mov	r5, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7ba      	b.n	8004222 <_printf_i+0x152>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f82f 	bl	800431c <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1f4>
 80042c0:	1b40      	subs	r0, r0, r5
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ce:	e7a8      	b.n	8004222 <_printf_i+0x152>
 80042d0:	462a      	mov	r2, r5
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ab      	beq.n	8004236 <_printf_i+0x166>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x23c>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a4      	b.n	800423a <_printf_i+0x16a>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09b      	beq.n	8004236 <_printf_i+0x166>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x220>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x214>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x230>
 8004314:	08004655 	.word	0x08004655
 8004318:	08004666 	.word	0x08004666

0800431c <memchr>:
 800431c:	4603      	mov	r3, r0
 800431e:	b510      	push	{r4, lr}
 8004320:	b2c9      	uxtb	r1, r1
 8004322:	4402      	add	r2, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	4618      	mov	r0, r3
 8004328:	d101      	bne.n	800432e <memchr+0x12>
 800432a:	2000      	movs	r0, #0
 800432c:	e003      	b.n	8004336 <memchr+0x1a>
 800432e:	7804      	ldrb	r4, [r0, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	428c      	cmp	r4, r1
 8004334:	d1f6      	bne.n	8004324 <memchr+0x8>
 8004336:	bd10      	pop	{r4, pc}

08004338 <memcpy>:
 8004338:	440a      	add	r2, r1
 800433a:	4291      	cmp	r1, r2
 800433c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004340:	d100      	bne.n	8004344 <memcpy+0xc>
 8004342:	4770      	bx	lr
 8004344:	b510      	push	{r4, lr}
 8004346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800434a:	4291      	cmp	r1, r2
 800434c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004350:	d1f9      	bne.n	8004346 <memcpy+0xe>
 8004352:	bd10      	pop	{r4, pc}

08004354 <memmove>:
 8004354:	4288      	cmp	r0, r1
 8004356:	b510      	push	{r4, lr}
 8004358:	eb01 0402 	add.w	r4, r1, r2
 800435c:	d902      	bls.n	8004364 <memmove+0x10>
 800435e:	4284      	cmp	r4, r0
 8004360:	4623      	mov	r3, r4
 8004362:	d807      	bhi.n	8004374 <memmove+0x20>
 8004364:	1e43      	subs	r3, r0, #1
 8004366:	42a1      	cmp	r1, r4
 8004368:	d008      	beq.n	800437c <memmove+0x28>
 800436a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800436e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004372:	e7f8      	b.n	8004366 <memmove+0x12>
 8004374:	4601      	mov	r1, r0
 8004376:	4402      	add	r2, r0
 8004378:	428a      	cmp	r2, r1
 800437a:	d100      	bne.n	800437e <memmove+0x2a>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004386:	e7f7      	b.n	8004378 <memmove+0x24>

08004388 <_free_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	d040      	beq.n	8004412 <_free_r+0x8a>
 8004390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004394:	1f0c      	subs	r4, r1, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	bfb8      	it	lt
 800439a:	18e4      	addlt	r4, r4, r3
 800439c:	f000 f910 	bl	80045c0 <__malloc_lock>
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <_free_r+0x8c>)
 80043a2:	6813      	ldr	r3, [r2, #0]
 80043a4:	b933      	cbnz	r3, 80043b4 <_free_r+0x2c>
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	6014      	str	r4, [r2, #0]
 80043aa:	4628      	mov	r0, r5
 80043ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043b0:	f000 b90c 	b.w	80045cc <__malloc_unlock>
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d908      	bls.n	80043ca <_free_r+0x42>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	1821      	adds	r1, r4, r0
 80043bc:	428b      	cmp	r3, r1
 80043be:	bf01      	itttt	eq
 80043c0:	6819      	ldreq	r1, [r3, #0]
 80043c2:	685b      	ldreq	r3, [r3, #4]
 80043c4:	1809      	addeq	r1, r1, r0
 80043c6:	6021      	streq	r1, [r4, #0]
 80043c8:	e7ed      	b.n	80043a6 <_free_r+0x1e>
 80043ca:	461a      	mov	r2, r3
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	b10b      	cbz	r3, 80043d4 <_free_r+0x4c>
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d9fa      	bls.n	80043ca <_free_r+0x42>
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	1850      	adds	r0, r2, r1
 80043d8:	42a0      	cmp	r0, r4
 80043da:	d10b      	bne.n	80043f4 <_free_r+0x6c>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	4401      	add	r1, r0
 80043e0:	1850      	adds	r0, r2, r1
 80043e2:	4283      	cmp	r3, r0
 80043e4:	6011      	str	r1, [r2, #0]
 80043e6:	d1e0      	bne.n	80043aa <_free_r+0x22>
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4401      	add	r1, r0
 80043ee:	6011      	str	r1, [r2, #0]
 80043f0:	6053      	str	r3, [r2, #4]
 80043f2:	e7da      	b.n	80043aa <_free_r+0x22>
 80043f4:	d902      	bls.n	80043fc <_free_r+0x74>
 80043f6:	230c      	movs	r3, #12
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	e7d6      	b.n	80043aa <_free_r+0x22>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	1821      	adds	r1, r4, r0
 8004400:	428b      	cmp	r3, r1
 8004402:	bf01      	itttt	eq
 8004404:	6819      	ldreq	r1, [r3, #0]
 8004406:	685b      	ldreq	r3, [r3, #4]
 8004408:	1809      	addeq	r1, r1, r0
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	6054      	str	r4, [r2, #4]
 8004410:	e7cb      	b.n	80043aa <_free_r+0x22>
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	20000214 	.word	0x20000214

08004418 <sbrk_aligned>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4e0e      	ldr	r6, [pc, #56]	; (8004454 <sbrk_aligned+0x3c>)
 800441c:	460c      	mov	r4, r1
 800441e:	6831      	ldr	r1, [r6, #0]
 8004420:	4605      	mov	r5, r0
 8004422:	b911      	cbnz	r1, 800442a <sbrk_aligned+0x12>
 8004424:	f000 f8bc 	bl	80045a0 <_sbrk_r>
 8004428:	6030      	str	r0, [r6, #0]
 800442a:	4621      	mov	r1, r4
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f8b7 	bl	80045a0 <_sbrk_r>
 8004432:	1c43      	adds	r3, r0, #1
 8004434:	d00a      	beq.n	800444c <sbrk_aligned+0x34>
 8004436:	1cc4      	adds	r4, r0, #3
 8004438:	f024 0403 	bic.w	r4, r4, #3
 800443c:	42a0      	cmp	r0, r4
 800443e:	d007      	beq.n	8004450 <sbrk_aligned+0x38>
 8004440:	1a21      	subs	r1, r4, r0
 8004442:	4628      	mov	r0, r5
 8004444:	f000 f8ac 	bl	80045a0 <_sbrk_r>
 8004448:	3001      	adds	r0, #1
 800444a:	d101      	bne.n	8004450 <sbrk_aligned+0x38>
 800444c:	f04f 34ff 	mov.w	r4, #4294967295
 8004450:	4620      	mov	r0, r4
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	20000218 	.word	0x20000218

08004458 <_malloc_r>:
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	1ccd      	adds	r5, r1, #3
 800445e:	f025 0503 	bic.w	r5, r5, #3
 8004462:	3508      	adds	r5, #8
 8004464:	2d0c      	cmp	r5, #12
 8004466:	bf38      	it	cc
 8004468:	250c      	movcc	r5, #12
 800446a:	2d00      	cmp	r5, #0
 800446c:	4607      	mov	r7, r0
 800446e:	db01      	blt.n	8004474 <_malloc_r+0x1c>
 8004470:	42a9      	cmp	r1, r5
 8004472:	d905      	bls.n	8004480 <_malloc_r+0x28>
 8004474:	230c      	movs	r3, #12
 8004476:	2600      	movs	r6, #0
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4630      	mov	r0, r6
 800447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004480:	4e2e      	ldr	r6, [pc, #184]	; (800453c <_malloc_r+0xe4>)
 8004482:	f000 f89d 	bl	80045c0 <__malloc_lock>
 8004486:	6833      	ldr	r3, [r6, #0]
 8004488:	461c      	mov	r4, r3
 800448a:	bb34      	cbnz	r4, 80044da <_malloc_r+0x82>
 800448c:	4629      	mov	r1, r5
 800448e:	4638      	mov	r0, r7
 8004490:	f7ff ffc2 	bl	8004418 <sbrk_aligned>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	4604      	mov	r4, r0
 8004498:	d14d      	bne.n	8004536 <_malloc_r+0xde>
 800449a:	6834      	ldr	r4, [r6, #0]
 800449c:	4626      	mov	r6, r4
 800449e:	2e00      	cmp	r6, #0
 80044a0:	d140      	bne.n	8004524 <_malloc_r+0xcc>
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	4631      	mov	r1, r6
 80044a6:	4638      	mov	r0, r7
 80044a8:	eb04 0803 	add.w	r8, r4, r3
 80044ac:	f000 f878 	bl	80045a0 <_sbrk_r>
 80044b0:	4580      	cmp	r8, r0
 80044b2:	d13a      	bne.n	800452a <_malloc_r+0xd2>
 80044b4:	6821      	ldr	r1, [r4, #0]
 80044b6:	3503      	adds	r5, #3
 80044b8:	1a6d      	subs	r5, r5, r1
 80044ba:	f025 0503 	bic.w	r5, r5, #3
 80044be:	3508      	adds	r5, #8
 80044c0:	2d0c      	cmp	r5, #12
 80044c2:	bf38      	it	cc
 80044c4:	250c      	movcc	r5, #12
 80044c6:	4638      	mov	r0, r7
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7ff ffa5 	bl	8004418 <sbrk_aligned>
 80044ce:	3001      	adds	r0, #1
 80044d0:	d02b      	beq.n	800452a <_malloc_r+0xd2>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	442b      	add	r3, r5
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	e00e      	b.n	80044f8 <_malloc_r+0xa0>
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	1b52      	subs	r2, r2, r5
 80044de:	d41e      	bmi.n	800451e <_malloc_r+0xc6>
 80044e0:	2a0b      	cmp	r2, #11
 80044e2:	d916      	bls.n	8004512 <_malloc_r+0xba>
 80044e4:	1961      	adds	r1, r4, r5
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	6025      	str	r5, [r4, #0]
 80044ea:	bf18      	it	ne
 80044ec:	6059      	strne	r1, [r3, #4]
 80044ee:	6863      	ldr	r3, [r4, #4]
 80044f0:	bf08      	it	eq
 80044f2:	6031      	streq	r1, [r6, #0]
 80044f4:	5162      	str	r2, [r4, r5]
 80044f6:	604b      	str	r3, [r1, #4]
 80044f8:	4638      	mov	r0, r7
 80044fa:	f104 060b 	add.w	r6, r4, #11
 80044fe:	f000 f865 	bl	80045cc <__malloc_unlock>
 8004502:	f026 0607 	bic.w	r6, r6, #7
 8004506:	1d23      	adds	r3, r4, #4
 8004508:	1af2      	subs	r2, r6, r3
 800450a:	d0b6      	beq.n	800447a <_malloc_r+0x22>
 800450c:	1b9b      	subs	r3, r3, r6
 800450e:	50a3      	str	r3, [r4, r2]
 8004510:	e7b3      	b.n	800447a <_malloc_r+0x22>
 8004512:	6862      	ldr	r2, [r4, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	bf0c      	ite	eq
 8004518:	6032      	streq	r2, [r6, #0]
 800451a:	605a      	strne	r2, [r3, #4]
 800451c:	e7ec      	b.n	80044f8 <_malloc_r+0xa0>
 800451e:	4623      	mov	r3, r4
 8004520:	6864      	ldr	r4, [r4, #4]
 8004522:	e7b2      	b.n	800448a <_malloc_r+0x32>
 8004524:	4634      	mov	r4, r6
 8004526:	6876      	ldr	r6, [r6, #4]
 8004528:	e7b9      	b.n	800449e <_malloc_r+0x46>
 800452a:	230c      	movs	r3, #12
 800452c:	4638      	mov	r0, r7
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	f000 f84c 	bl	80045cc <__malloc_unlock>
 8004534:	e7a1      	b.n	800447a <_malloc_r+0x22>
 8004536:	6025      	str	r5, [r4, #0]
 8004538:	e7de      	b.n	80044f8 <_malloc_r+0xa0>
 800453a:	bf00      	nop
 800453c:	20000214 	.word	0x20000214

08004540 <_realloc_r>:
 8004540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004544:	4680      	mov	r8, r0
 8004546:	4614      	mov	r4, r2
 8004548:	460e      	mov	r6, r1
 800454a:	b921      	cbnz	r1, 8004556 <_realloc_r+0x16>
 800454c:	4611      	mov	r1, r2
 800454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004552:	f7ff bf81 	b.w	8004458 <_malloc_r>
 8004556:	b92a      	cbnz	r2, 8004564 <_realloc_r+0x24>
 8004558:	f7ff ff16 	bl	8004388 <_free_r>
 800455c:	4625      	mov	r5, r4
 800455e:	4628      	mov	r0, r5
 8004560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004564:	f000 f838 	bl	80045d8 <_malloc_usable_size_r>
 8004568:	4284      	cmp	r4, r0
 800456a:	4607      	mov	r7, r0
 800456c:	d802      	bhi.n	8004574 <_realloc_r+0x34>
 800456e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004572:	d812      	bhi.n	800459a <_realloc_r+0x5a>
 8004574:	4621      	mov	r1, r4
 8004576:	4640      	mov	r0, r8
 8004578:	f7ff ff6e 	bl	8004458 <_malloc_r>
 800457c:	4605      	mov	r5, r0
 800457e:	2800      	cmp	r0, #0
 8004580:	d0ed      	beq.n	800455e <_realloc_r+0x1e>
 8004582:	42bc      	cmp	r4, r7
 8004584:	4622      	mov	r2, r4
 8004586:	4631      	mov	r1, r6
 8004588:	bf28      	it	cs
 800458a:	463a      	movcs	r2, r7
 800458c:	f7ff fed4 	bl	8004338 <memcpy>
 8004590:	4631      	mov	r1, r6
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff fef8 	bl	8004388 <_free_r>
 8004598:	e7e1      	b.n	800455e <_realloc_r+0x1e>
 800459a:	4635      	mov	r5, r6
 800459c:	e7df      	b.n	800455e <_realloc_r+0x1e>
	...

080045a0 <_sbrk_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	2300      	movs	r3, #0
 80045a4:	4d05      	ldr	r5, [pc, #20]	; (80045bc <_sbrk_r+0x1c>)
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	f7fd f93c 	bl	8001828 <_sbrk>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_sbrk_r+0x1a>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_sbrk_r+0x1a>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	2000021c 	.word	0x2000021c

080045c0 <__malloc_lock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__malloc_lock+0x8>)
 80045c2:	f000 b811 	b.w	80045e8 <__retarget_lock_acquire_recursive>
 80045c6:	bf00      	nop
 80045c8:	20000220 	.word	0x20000220

080045cc <__malloc_unlock>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__malloc_unlock+0x8>)
 80045ce:	f000 b80c 	b.w	80045ea <__retarget_lock_release_recursive>
 80045d2:	bf00      	nop
 80045d4:	20000220 	.word	0x20000220

080045d8 <_malloc_usable_size_r>:
 80045d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045dc:	1f18      	subs	r0, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bfbc      	itt	lt
 80045e2:	580b      	ldrlt	r3, [r1, r0]
 80045e4:	18c0      	addlt	r0, r0, r3
 80045e6:	4770      	bx	lr

080045e8 <__retarget_lock_acquire_recursive>:
 80045e8:	4770      	bx	lr

080045ea <__retarget_lock_release_recursive>:
 80045ea:	4770      	bx	lr

080045ec <_init>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr

080045f8 <_fini>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr
